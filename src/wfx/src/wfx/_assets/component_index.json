{
  "categories": {
    "cloud": [
      "amazon.AmazonBedrockEmbeddingsComponent",
      "amazon.AmazonBedrockComponent",
      "amazon.S3BucketUploaderComponent",
      "azure.AzureChatOpenAIComponent",
      "azure.AzureOpenAIEmbeddingsComponent"
    ],
    "custom": [
      "custom_component.CustomComponent"
    ],
    "datasources": [
      "youtube.YouTubeChannelComponent",
      "youtube.YouTubeCommentsComponent",
      "youtube.YouTubePlaylistComponent",
      "youtube.YouTubeSearchComponent",
      "youtube.YouTubeTranscriptsComponent",
      "youtube.YouTubeTrendingComponent",
      "youtube.YouTubeVideoDetailsComponent"
    ],
    "document_processing": [
      "docling.ChunkDoclingDocumentComponent",
      "docling.DoclingInlineComponent",
      "docling.DoclingRemoteComponent",
      "docling.ExportDoclingDocumentComponent"
    ],
    "embeddings": [
      "embeddings.EmbeddingSimilarityComponent",
      "embeddings.TextEmbedderComponent"
    ],
    "integration": [
      "composio.ComposioAPIComponent",
      "composio.ComposioGitHubAPIComponent",
      "composio.ComposioGmailAPIComponent",
      "composio.ComposioGoogleCalendarAPIComponent",
      "composio.ComposioGooglemeetAPIComponent",
      "composio.ComposioOutlookAPIComponent",
      "composio.ComposioSlackAPIComponent",
      "composio.ComposioGoogleTasksAPIComponent",
      "composio.ComposioLinearAPIComponent",
      "composio.ComposioRedditAPIComponent",
      "composio.ComposioSlackbotAPIComponent",
      "composio.ComposioSupabaseAPIComponent",
      "composio.ComposioTodoistAPIComponent",
      "composio.ComposioYoutubeAPIComponent",
      "composio.ComposioGoogleDocsAPIComponent",
      "composio.ComposioGoogleSheetsAPIComponent",
      "composio.ComposioKlaviyoAPIComponent",
      "composio.ComposioNotionAPIComponent",
      "composio.ComposioOneDriveAPIComponent",
      "composio.ComposioAirtableAPIComponent",
      "composio.ComposioAsanaAPIComponent",
      "composio.ComposioAttioAPIComponent",
      "composio.ComposioCalendlyAPIComponent",
      "composio.ComposioContentfulAPIComponent",
      "composio.ComposioDiscordAPIComponent",
      "composio.ComposioFigmaAPIComponent",
      "composio.ComposioMiroAPIComponent",
      "composio.ComposioWrikeAPIComponent"
    ],
    "models": [
      "aiml.AIMLModelComponent",
      "aiml.AIMLEmbeddingsComponent",
      "anthropic.AnthropicModelComponent",
      "cohere.CohereComponent",
      "cohere.CohereEmbeddingsComponent",
      "cohere.CohereRerankComponent",
      "deepseek.DeepSeekModelComponent",
      "groq.GroqModel",
      "huggingface.HuggingFaceEndpointsComponent",
      "huggingface.HuggingFaceInferenceAPIEmbeddingsComponent",
      "mistral.MistralAIModelComponent",
      "mistral.MistralAIEmbeddingsComponent",
      "novita.NovitaModelComponent",
      "nvidia.NVIDIAModelComponent",
      "nvidia.NVIDIAEmbeddingsComponent",
      "nvidia.NvidiaIngestComponent",
      "nvidia.NvidiaRerankComponent",
      "ollama.ChatOllamaComponent",
      "ollama.OllamaEmbeddingsComponent",
      "openai.OpenAIEmbeddingsComponent",
      "openai.OpenAIModelComponent",
      "perplexity.PerplexityComponent",
      "sambanova.SambaNovaComponent",
      "vertexai.ChatVertexAIComponent",
      "vertexai.VertexAIEmbeddingsComponent",
      "xai.XAIModelComponent"
    ],
    "other": [
      "agents.AgentComponent",
      "agents.MCPToolsComponent",
      "assemblyai.AssemblyAIGetSubtitles",
      "assemblyai.AssemblyAILeMUR",
      "assemblyai.AssemblyAIListTranscripts",
      "assemblyai.AssemblyAITranscriptionJobCreator",
      "assemblyai.AssemblyAITranscriptionJobPoller",
      "baidu.QianfanChatEndpoint",
      "cassandra.CassandraVectorStoreComponent",
      "cassandra.CassandraGraphVectorStoreComponent",
      "cassandra.CassandraChatMemory",
      "cleanlab.CleanlabEvaluator",
      "cleanlab.CleanlabRAGEvaluator",
      "cleanlab.CleanlabRemediator",
      "clickhouse.ClickhouseVectorStoreComponent",
      "cloudflare.CloudflareWorkersAIEmbeddingsComponent",
      "couchbase.CouchbaseVectorStoreComponent",
      "data.APIRequestComponent",
      "data.CSVToDataComponent",
      "data.DirectoryComponent",
      "data.FileComponent",
      "data.JSONToDataComponent",
      "data.SQLComponent",
      "data.URLComponent",
      "data.WebSearchComponent",
      "data.WebhookComponent",
      "data.NewsSearchComponent",
      "data.RSSReaderComponent",
      "datastax.AssistantsCreateAssistant",
      "datastax.AssistantsCreateThread",
      "datastax.AssistantsGetAssistantName",
      "datastax.AssistantsListAssistants",
      "datastax.AssistantsRun",
      "datastax.AstraAssistantManager",
      "datastax.AstraDBCQLToolComponent",
      "datastax.AstraDBChatMemory",
      "datastax.AstraDBToolComponent",
      "datastax.AstraDBVectorStoreComponent",
      "datastax.AstraVectorizeComponent",
      "datastax.Dotenv",
      "datastax.GetEnvVar",
      "elastic.ElasticsearchVectorStoreComponent",
      "elastic.OpenSearchVectorStoreComponent",
      "firecrawl.FirecrawlCrawlApi",
      "firecrawl.FirecrawlExtractApi",
      "firecrawl.FirecrawlMapApi",
      "firecrawl.FirecrawlScrapeApi",
      "ibm.WatsonxAIComponent",
      "ibm.WatsonxEmbeddingsComponent",
      "input_output.ChatInput",
      "input_output.ChatOutput",
      "input_output.TextInputComponent",
      "input_output.TextOutputComponent",
      "knowledge_bases.KnowledgeIngestionComponent",
      "knowledge_bases.KnowledgeRetrievalComponent",
      "langchain_utilities.CharacterTextSplitterComponent",
      "langchain_utilities.ConversationChainComponent",
      "langchain_utilities.CSVAgentComponent",
      "langchain_utilities.FakeEmbeddingsComponent",
      "langchain_utilities.HtmlLinkExtractorComponent",
      "langchain_utilities.JsonAgentComponent",
      "langchain_utilities.LangChainHubPromptComponent",
      "langchain_utilities.LanguageRecursiveTextSplitterComponent",
      "langchain_utilities.LLMCheckerChainComponent",
      "langchain_utilities.LLMMathChainComponent",
      "langchain_utilities.NaturalLanguageTextSplitterComponent",
      "langchain_utilities.OpenAIToolsAgentComponent",
      "langchain_utilities.OpenAPIAgentComponent",
      "langchain_utilities.RecursiveCharacterTextSplitterComponent",
      "langchain_utilities.RetrievalQAComponent",
      "langchain_utilities.RunnableExecComponent",
      "langchain_utilities.SelfQueryRetrieverComponent",
      "langchain_utilities.SemanticTextSplitterComponent",
      "langchain_utilities.SpiderTool",
      "langchain_utilities.SQLAgentComponent",
      "langchain_utilities.SQLDatabaseComponent",
      "langchain_utilities.SQLGeneratorComponent",
      "langchain_utilities.ToolCallingAgentComponent",
      "langchain_utilities.VectorStoreInfoComponent",
      "langchain_utilities.VectorStoreRouterAgentComponent",
      "langchain_utilities.XMLAgentComponent",
      "lmstudio.LMStudioEmbeddingsComponent",
      "lmstudio.LMStudioModelComponent",
      "maritalk.MaritalkModelComponent",
      "models.EmbeddingModelComponent",
      "models.LanguageModelComponent",
      "mongodb.MongoVectorStoreComponent",
      "notdiamond.NotDiamondComponent",
      "openrouter.OpenRouterComponent",
      "prototypes.PythonFunctionComponent",
      "scrapegraph.ScrapeGraphMarkdownifyApi",
      "scrapegraph.ScrapeGraphSearchApi",
      "scrapegraph.ScrapeGraphSmartScraperApi",
      "twelvelabs.ConvertAstraToTwelveLabs",
      "twelvelabs.PegasusIndexVideo",
      "twelvelabs.SplitVideoComponent",
      "twelvelabs.TwelveLabsPegasus",
      "twelvelabs.TwelveLabsTextEmbeddingsComponent",
      "twelvelabs.TwelveLabsVideoEmbeddingsComponent",
      "twelvelabs.VideoFileComponent",
      "vectorstores.LocalDBComponent",
      "vectorstores.AstraDBVectorStoreComponent",
      "vectorstores.MongoVectorStoreComponent",
      "vlmrun.VLMRunTranscription"
    ],
    "search": [
      "searchapi.SearchComponent"
    ],
    "tools": [
      "crewai.CrewAIAgentComponent",
      "crewai.HierarchicalCrewComponent",
      "crewai.HierarchicalTaskComponent",
      "crewai.SequentialCrewComponent",
      "crewai.SequentialTaskAgentComponent",
      "crewai.SequentialTaskComponent",
      "helpers.CalculatorComponent",
      "helpers.CreateListComponent",
      "helpers.CurrentDateComponent",
      "helpers.IDGeneratorComponent",
      "helpers.MemoryComponent",
      "helpers.OutputParserComponent",
      "helpers.MessageStoreComponent",
      "logic.ConditionalRouterComponent",
      "logic.DataConditionalRouterComponent",
      "logic.FlowToolComponent",
      "logic.LoopComponent",
      "logic.PassMessageComponent",
      "logic.RunFlowComponent",
      "logic.SubFlowComponent",
      "processing.AlterMetadataComponent",
      "processing.BatchRunComponent",
      "processing.CombineTextComponent",
      "processing.TypeConverterComponent",
      "processing.CreateDataComponent",
      "processing.DataOperationsComponent",
      "processing.DataToDataFrameComponent",
      "processing.DataFrameOperationsComponent",
      "processing.DataFrameToToolsetComponent",
      "processing.ExtractDataKeyComponent",
      "processing.FilterDataComponent",
      "processing.DataFilterComponent",
      "processing.JSONCleaner",
      "processing.LambdaFilterComponent",
      "processing.LLMRouterComponent",
      "processing.MergeDataComponent",
      "processing.MessageToDataComponent",
      "processing.ParseDataComponent",
      "processing.ParseDataFrameComponent",
      "processing.ParseJSONDataComponent",
      "processing.ParserComponent",
      "processing.PromptComponent",
      "processing.PythonREPLComponent",
      "processing.RegexExtractorComponent",
      "processing.SelectDataComponent",
      "processing.SplitTextComponent",
      "processing.StructuredOutputComponent",
      "processing.UpdateDataComponent",
      "tools.CalculatorToolComponent",
      "tools.PythonCodeStructuredTool",
      "tools.PythonREPLToolComponent",
      "tools.SearchAPIComponent",
      "tools.SearXNGToolComponent",
      "tools.SerpAPIComponent",
      "tools.TavilySearchToolComponent",
      "tools.WikidataAPIComponent",
      "tools.WikipediaAPIComponent",
      "tools.YfinanceToolComponent"
    ],
    "vectorstores": [
      "FAISS.FaissVectorStoreComponent",
      "chroma.ChromaVectorStoreComponent",
      "milvus.MilvusVectorStoreComponent",
      "pgvector.PGVectorStoreComponent",
      "pinecone.PineconeVectorStoreComponent",
      "qdrant.QdrantVectorStoreComponent",
      "redis.RedisVectorStoreComponent",
      "redis.RedisIndexChatMemory",
      "supabase.SupabaseVectorStoreComponent",
      "upstash.UpstashVectorStoreComponent",
      "vectara.VectaraVectorStoreComponent",
      "vectara.VectaraRagComponent",
      "weaviate.WeaviateVectorStoreComponent"
    ]
  },
  "components": {
    "FAISS.FaissVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "faiss",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/FAISS/faiss.py",
      "info": {
        "dependencies": [
          "Path",
          "FAISS",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "Data"
        ],
        "description": "FAISS Vector Store with search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "FAISS",
      "name": "FaissVectorStoreComponent"
    },
    "agents.AgentComponent": {
      "category": "other",
      "file_path": "agent",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/agents/agent.py",
      "info": {
        "dependencies": [
          "re",
          "StructuredTool,",
          "ValidationError",
          "LCToolsAgentComponent",
          "ExceptionWithMessageError",
          "(",
          "get_model_name",
          "CurrentDateComponent",
          "MemoryComponent",
          "ToolCallingAgentComponent",
          "get_component_toolkit",
          "update_component_build_config",
          "build_model_from_schema",
          "BoolInput",
          "DropdownInput,",
          "logger",
          "Data",
          "dotdict",
          "Message",
          "EditMode"
        ],
        "description": "Get the agent requirements for the agent.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "agents",
      "name": "AgentComponent"
    },
    "agents.MCPToolsComponent": {
      "category": "other",
      "file_path": "mcp_component",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/agents/mcp_component.py",
      "info": {
        "dependencies": [
          "annotations",
          "asyncio",
          "uuid",
          "Any",
          "StructuredTool",
          "maybe_unflatten_dict,",
          "(",
          "ComponentWithCache",
          "InputTypes",
          "BoolInput,",
          "flatten_schema,",
          "logger",
          "DataFrame",
          "Message",
          "get_settings_service,",
          "get_server",
          "get_user_by_id"
        ],
        "description": "Ensure the cache has the required structure.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "agents",
      "name": "MCPToolsComponent"
    },
    "aiml.AIMLEmbeddingsComponent": {
      "category": "models",
      "file_path": "aiml_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/aiml/aiml_embeddings.py",
      "info": {
        "dependencies": [
          "AIMLEmbeddingsImpl",
          "LCEmbeddingsModel",
          "Embeddings",
          "DropdownInput",
          "SecretStrInput"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "aiml",
      "name": "AIMLEmbeddingsComponent"
    },
    "aiml.AIMLModelComponent": {
      "category": "models",
      "file_path": "aiml",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/aiml/aiml.py",
      "info": {
        "dependencies": [
          "ChatOpenAI",
          "SecretStr",
          "override",
          "AimlModels",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "(",
          "BadRequestError"
        ],
        "description": "Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "aiml",
      "name": "AIMLModelComponent"
    },
    "amazon.AmazonBedrockComponent": {
      "category": "cloud",
      "file_path": "amazon_bedrock_model",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/amazon/amazon_bedrock_model.py",
      "info": {
        "dependencies": [
          "AWS_REGIONS,",
          "LCModelComponent",
          "LanguageModel",
          "MessageTextInput,",
          "DictInput,",
          "ChatBedrock",
          "boto3"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "amazon",
      "name": "AmazonBedrockComponent"
    },
    "amazon.AmazonBedrockEmbeddingsComponent": {
      "category": "cloud",
      "file_path": "amazon_bedrock_embedding",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/amazon/amazon_bedrock_embedding.py",
      "info": {
        "dependencies": [
          "AWS_EMBEDDING_MODEL_IDS,",
          "LCModelComponent",
          "Embeddings",
          "SecretStrInput",
          "DropdownInput,",
          "BedrockEmbeddings",
          "boto3"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "amazon",
      "name": "AmazonBedrockEmbeddingsComponent"
    },
    "amazon.S3BucketUploaderComponent": {
      "category": "cloud",
      "file_path": "s3_bucket_uploader",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/amazon/s3_bucket_uploader.py",
      "info": {
        "dependencies": [
          "Path",
          "Any",
          "Component",
          "(",
          "boto3"
        ],
        "description": "It provides two strategies for file upload: \"By Data\" and \"By File Name\". The component\n    requires AWS credentials and bucket details as inputs and processes files accordingly.\n\n    Attributes:\n        display_name (str): The display name of the component.\n        description (str): A brief description of the components functionality.\n        icon (str): The icon representing the component.\n        name (str): The internal name of the component.\n        inputs (list): A list of input configurations required by the component.\n        outputs (list): A list of output configurations provided by the component.\n\n    Methods:\n        process_files() -> None:\n            Processes files based on the selected strategy. Calls the appropriate method\n            based on the strategy attribute.\n        process_files_by_data() -> None:\n            Processes and uploads files to an S3 bucket based on the data inputs. Iterates\n            over the data inputs, logs the file path and text content, and uploads each file\n            to the specified S3 bucket if both file path and text content are available.\n        process_files_by_name() -> None:\n            Processes and uploads files to an S3 bucket based on their names. Iterates through\n            the list of data inputs, retrieves the file path from each data item, and uploads\n            the file to the specified S3 bucket if the file path is available. Logs the file\n            path being uploaded.\n        _s3_client() -> Any:\n            Creates and returns an S3 client using the provided AWS access key ID and secret\n            access key.\n\n        Please note that this component requires the boto3 library to be installed. It is designed\n        to work with File and Director components as inputs",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "amazon",
      "name": "S3BucketUploaderComponent"
    },
    "anthropic.AnthropicModelComponent": {
      "category": "models",
      "file_path": "anthropic",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/anthropic/anthropic.py",
      "info": {
        "dependencies": [
          "Any,",
          "requests",
          "ValidationError",
          "(",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "dotdict",
          "ChatAnthropic",
          "anthropic",
          "BadRequestError"
        ],
        "description": "Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "anthropic",
      "name": "AnthropicModelComponent"
    },
    "assemblyai.AssemblyAIGetSubtitles": {
      "category": "other",
      "file_path": "assemblyai_get_subtitles",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/assemblyai/assemblyai_get_subtitles.py",
      "info": {
        "dependencies": [
          "assemblyai",
          "Component",
          "DataInput,",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "assemblyai",
      "name": "AssemblyAIGetSubtitles"
    },
    "assemblyai.AssemblyAILeMUR": {
      "category": "other",
      "file_path": "assemblyai_lemur",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/assemblyai/assemblyai_lemur.py",
      "info": {
        "dependencies": [
          "assemblyai",
          "Component",
          "DataInput,",
          "logger",
          "Data"
        ],
        "description": "Use the LeMUR task endpoint to input the LLM prompt.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "assemblyai",
      "name": "AssemblyAILeMUR"
    },
    "assemblyai.AssemblyAIListTranscripts": {
      "category": "other",
      "file_path": "assemblyai_list_transcripts",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/assemblyai/assemblyai_list_transcripts.py",
      "info": {
        "dependencies": [
          "assemblyai",
          "Component",
          "BoolInput,",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "assemblyai",
      "name": "AssemblyAIListTranscripts"
    },
    "assemblyai.AssemblyAITranscriptionJobCreator": {
      "category": "other",
      "file_path": "assemblyai_start_transcript",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/assemblyai/assemblyai_start_transcript.py",
      "info": {
        "dependencies": [
          "Path",
          "assemblyai",
          "Component",
          "BoolInput,",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "assemblyai",
      "name": "AssemblyAITranscriptionJobCreator"
    },
    "assemblyai.AssemblyAITranscriptionJobPoller": {
      "category": "other",
      "file_path": "assemblyai_poll_transcript",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/assemblyai/assemblyai_poll_transcript.py",
      "info": {
        "dependencies": [
          "assemblyai",
          "Component",
          "RangeSpec",
          "DataInput,",
          "logger",
          "Data"
        ],
        "description": "Polls the transcription status until completion and returns the Data.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "assemblyai",
      "name": "AssemblyAITranscriptionJobPoller"
    },
    "azure.AzureChatOpenAIComponent": {
      "category": "cloud",
      "file_path": "azure_openai",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/azure/azure_openai.py",
      "info": {
        "dependencies": [
          "AzureChatOpenAI",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "MessageTextInput",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "azure",
      "name": "AzureChatOpenAIComponent"
    },
    "azure.AzureOpenAIEmbeddingsComponent": {
      "category": "cloud",
      "file_path": "azure_openai_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/azure/azure_openai_embeddings.py",
      "info": {
        "dependencies": [
          "AzureOpenAIEmbeddings",
          "LCModelComponent",
          "OPENAI_EMBEDDING_MODEL_NAMES",
          "Embeddings",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "azure",
      "name": "AzureOpenAIEmbeddingsComponent"
    },
    "baidu.QianfanChatEndpoint": {
      "category": "other",
      "file_path": "baidu_qianfan_chat",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/baidu/baidu_qianfan_chat.py",
      "info": {
        "dependencies": [
          "QianfanChatEndpoint",
          "LCModelComponent",
          "LanguageModel",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "baidu",
      "name": "QianfanChatEndpoint"
    },
    "cassandra.CassandraChatMemory": {
      "category": "other",
      "file_path": "cassandra_chat",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cassandra/cassandra_chat.py",
      "info": {
        "dependencies": [
          "LCChatMemoryComponent",
          "Memory",
          "DictInput,",
          "CassandraChatMessageHistory",
          "cassio",
          "UUID"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cassandra",
      "name": "CassandraChatMemory"
    },
    "cassandra.CassandraGraphVectorStoreComponent": {
      "category": "other",
      "file_path": "cassandra_graph",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cassandra/cassandra_graph.py",
      "info": {
        "dependencies": [
          "UUID",
          "CassandraGraphVectorStore",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "DictInput,",
          "(",
          "Data",
          "cassio",
          "SetupMode"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cassandra",
      "name": "CassandraGraphVectorStoreComponent"
    },
    "cassandra.CassandraVectorStoreComponent": {
      "category": "other",
      "file_path": "cassandra",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cassandra/cassandra.py",
      "info": {
        "dependencies": [
          "Cassandra",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "(",
          "Data",
          "cassio",
          "SetupMode",
          "UUID"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cassandra",
      "name": "CassandraVectorStoreComponent"
    },
    "chroma.ChromaVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "chroma",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/chroma/chroma.py",
      "info": {
        "dependencies": [
          "deepcopy",
          "TYPE_CHECKING",
          "Settings",
          "Chroma",
          "override",
          "LCVectorStoreComponent,",
          "chroma_collection_to_data",
          "BoolInput,",
          "Data",
          "DataFrame",
          "Client",
          "filter_complex_metadata"
        ],
        "description": "Chroma Vector Store with search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "chroma",
      "name": "ChromaVectorStoreComponent"
    },
    "cleanlab.CleanlabEvaluator": {
      "category": "other",
      "file_path": "cleanlab_evaluator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cleanlab/cleanlab_evaluator.py",
      "info": {
        "dependencies": [
          "TLM",
          "Component",
          "(",
          "Message"
        ],
        "description": "This component takes a prompt and response pair, along with optional system instructions,\n    and uses Cleanlab's evaluation algorithms to generate a trust score and explanation.\n\n    Inputs:\n        - system_prompt (MessageTextInput): Optional system-level instructions prepended to the user prompt.\n        - prompt (MessageTextInput): The user's prompt or query sent to the LLM.\n        - response (MessageTextInput): The response generated by the LLM to be evaluated. This should come from the\n          LLM component, i.e. OpenAI, Gemini, etc.\n        - api_key (SecretStrInput): Your Cleanlab API key.\n        - model (DropdownInput): The model used by Cleanlab to evaluate the response (can differ from the\n          generation model).\n        - quality_preset (DropdownInput): Tradeoff setting for accuracy vs. speed and cost. Higher presets are\n          slower but more accurate.\n\n    Outputs:\n        - response_passthrough (Message): The original response, passed through for downstream use.\n        - score (number): A float between 0 and 1 indicating Cleanlab's trustworthiness score for the response.\n        - explanation (Message): A textual explanation of why the response received its score.\n\n    This component works well in conjunction with the CleanlabRemediator to create a complete trust evaluation\n    and remediation pipeline.\n\n    More details on the evaluation metrics can be found here: https://help.cleanlab.ai/tlm/tutorials/tlm/",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cleanlab",
      "name": "CleanlabEvaluator"
    },
    "cleanlab.CleanlabRAGEvaluator": {
      "category": "other",
      "file_path": "cleanlab_rag_evaluator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cleanlab/cleanlab_rag_evaluator.py",
      "info": {
        "dependencies": [
          "TrustworthyRAG,",
          "Component",
          "(",
          "Message"
        ],
        "description": "This component takes a query, retrieved context, and generated response from a RAG pipeline,\n    and uses Cleanlab's evaluation algorithms to assess various aspects of the RAG system's performance.\n\n    The component can evaluate:\n    - Overall trustworthiness of the LLM generated response\n    - Context sufficiency (whether the retrieved context contains information needed to answer the query)\n    - Response groundedness (whether the response is supported directly by the context)\n    - Response helpfulness (whether the response effectively addresses the user's query)\n    - Query ease (whether the user query seems easy for an AI system to properly handle, useful to diagnose\n      queries that are: complex, vague, tricky, or disgruntled-sounding)\n\n    Outputs:\n        - Trust Score: A score between 0-1 corresponding to the trustworthiness of the response. A higher score\n          indicates a higher confidence that the response is correct/good.\n        - Explanation: An LLM generated explanation of the trustworthiness assessment\n        - Other Evals: Additional evaluation metrics for selected evaluation types in the \"Controls\" tab\n        - Evaluation Summary: A comprehensive summary of context, query, response, and selected evaluation results\n\n    This component works well in conjunction with the CleanlabRemediator to create a complete trust evaluation\n    and remediation pipeline.\n\n    More details on the evaluation metrics can be found here: https://help.cleanlab.ai/tlm/use-cases/tlm_rag/",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cleanlab",
      "name": "CleanlabRAGEvaluator"
    },
    "cleanlab.CleanlabRemediator": {
      "category": "other",
      "file_path": "cleanlab_remediator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cleanlab/cleanlab_remediator.py",
      "info": {
        "dependencies": [
          "Component",
          "RangeSpec",
          "BoolInput,",
          "Message"
        ],
        "description": "This component takes a response and its associated trust score,\n    and applies remediation strategies based on configurable thresholds and settings.\n\n    Inputs:\n        - response (MessageTextInput): The original LLM-generated response to be evaluated and possibly remediated.\n          The CleanlabEvaluator passes this response through.\n        - score (HandleInput): The trust score output from CleanlabEvaluator (expected to be a float between 0 and 1).\n        - explanation (MessageTextInput): Optional textual explanation for the trust score, to be included in the\n          output.\n        - threshold (Input[float]): Minimum trust score required to accept the response. If the score is lower, the\n          response is remediated.\n        - show_untrustworthy_response (BoolInput): If true, returns the original response with a warning; if false,\n          returns fallback text.\n        - untrustworthy_warning_text (PromptInput): Text warning to append to responses deemed untrustworthy (when\n          showing them).\n        - fallback_text (PromptInput): Replacement message returned if the response is untrustworthy and should be\n          hidden.\n\n    Outputs:\n        - remediated_response (Message): Either:\n            \u2022 the original response,\n            \u2022 the original response with appended warning, or\n            \u2022 the fallback response,\n          depending on the trust score and configuration.\n\n    This component is typically used downstream of CleanlabEvaluator or CleanlabRagValidator\n    to take appropriate action on low-trust responses and inform users accordingly.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cleanlab",
      "name": "CleanlabRemediator"
    },
    "clickhouse.ClickhouseVectorStoreComponent": {
      "category": "other",
      "file_path": "clickhouse",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/clickhouse/clickhouse.py",
      "info": {
        "dependencies": [
          "Clickhouse,",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "(",
          "Data",
          "clickhouse_connect"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "clickhouse",
      "name": "ClickhouseVectorStoreComponent"
    },
    "cloudflare.CloudflareWorkersAIEmbeddingsComponent": {
      "category": "other",
      "file_path": "cloudflare",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cloudflare/cloudflare.py",
      "info": {
        "dependencies": [
          "CloudflareWorkersAIEmbeddings",
          "LCModelComponent",
          "Embeddings",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cloudflare",
      "name": "CloudflareWorkersAIEmbeddingsComponent"
    },
    "cohere.CohereComponent": {
      "category": "models",
      "file_path": "cohere_models",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cohere/cohere_models.py",
      "info": {
        "dependencies": [
          "ChatCohere",
          "SecretStr",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "SecretStrInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cohere",
      "name": "CohereComponent"
    },
    "cohere.CohereEmbeddingsComponent": {
      "category": "models",
      "file_path": "cohere_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cohere/cohere_embeddings.py",
      "info": {
        "dependencies": [
          "Any",
          "cohere",
          "CohereEmbeddings",
          "LCModelComponent",
          "Embeddings",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cohere",
      "name": "CohereEmbeddingsComponent"
    },
    "cohere.CohereRerankComponent": {
      "category": "models",
      "file_path": "cohere_rerank",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/cohere/cohere_rerank.py",
      "info": {
        "dependencies": [
          "LCCompressorComponent",
          "BaseDocumentCompressor",
          "SecretStrInput",
          "DropdownInput",
          "Output",
          "CohereRerank"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "cohere",
      "name": "CohereRerankComponent"
    },
    "composio.ComposioAPIComponent": {
      "category": "integration",
      "file_path": "composio_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/composio_api.py",
      "info": {
        "dependencies": [
          "Sequence",
          "Any",
          "Composio",
          "LangchainProvider",
          "Tool",
          "LCToolComponent",
          "(",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioAPIComponent"
    },
    "composio.ComposioAirtableAPIComponent": {
      "category": "integration",
      "file_path": "airtable_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/airtable_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Airtable component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioAirtableAPIComponent"
    },
    "composio.ComposioAsanaAPIComponent": {
      "category": "integration",
      "file_path": "asana_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/asana_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Asana component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioAsanaAPIComponent"
    },
    "composio.ComposioAttioAPIComponent": {
      "category": "integration",
      "file_path": "attio_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/attio_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Attio component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioAttioAPIComponent"
    },
    "composio.ComposioCalendlyAPIComponent": {
      "category": "integration",
      "file_path": "calendly_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/calendly_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Calendly component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioCalendlyAPIComponent"
    },
    "composio.ComposioContentfulAPIComponent": {
      "category": "integration",
      "file_path": "contentful_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/contentful_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Contentful component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioContentfulAPIComponent"
    },
    "composio.ComposioDiscordAPIComponent": {
      "category": "integration",
      "file_path": "discord_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/discord_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Discord component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioDiscordAPIComponent"
    },
    "composio.ComposioFigmaAPIComponent": {
      "category": "integration",
      "file_path": "figma_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/figma_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Figma component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioFigmaAPIComponent"
    },
    "composio.ComposioGitHubAPIComponent": {
      "category": "integration",
      "file_path": "github_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/github_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for GitHub component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGitHubAPIComponent"
    },
    "composio.ComposioGmailAPIComponent": {
      "category": "integration",
      "file_path": "gmail_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/gmail_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Post-processor for GMAIL_SEND_EMAIL action.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGmailAPIComponent"
    },
    "composio.ComposioGoogleCalendarAPIComponent": {
      "category": "integration",
      "file_path": "googlecalendar_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/googlecalendar_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Google Calendar component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGoogleCalendarAPIComponent"
    },
    "composio.ComposioGoogleDocsAPIComponent": {
      "category": "integration",
      "file_path": "googledocs_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/googledocs_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Google Docs component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGoogleDocsAPIComponent"
    },
    "composio.ComposioGoogleSheetsAPIComponent": {
      "category": "integration",
      "file_path": "googlesheets_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/googlesheets_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Google Sheets component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGoogleSheetsAPIComponent"
    },
    "composio.ComposioGoogleTasksAPIComponent": {
      "category": "integration",
      "file_path": "googletasks_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/googletasks_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGoogleTasksAPIComponent"
    },
    "composio.ComposioGooglemeetAPIComponent": {
      "category": "integration",
      "file_path": "googlemeet_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/googlemeet_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Google Calendar component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioGooglemeetAPIComponent"
    },
    "composio.ComposioKlaviyoAPIComponent": {
      "category": "integration",
      "file_path": "klaviyo_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/klaviyo_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Klaviyo component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioKlaviyoAPIComponent"
    },
    "composio.ComposioLinearAPIComponent": {
      "category": "integration",
      "file_path": "linear_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/linear_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Linear component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioLinearAPIComponent"
    },
    "composio.ComposioMiroAPIComponent": {
      "category": "integration",
      "file_path": "miro_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/miro_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Miro component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioMiroAPIComponent"
    },
    "composio.ComposioNotionAPIComponent": {
      "category": "integration",
      "file_path": "notion_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/notion_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Notion component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioNotionAPIComponent"
    },
    "composio.ComposioOneDriveAPIComponent": {
      "category": "integration",
      "file_path": "onedrive_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/onedrive_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for OneDrive component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioOneDriveAPIComponent"
    },
    "composio.ComposioOutlookAPIComponent": {
      "category": "integration",
      "file_path": "outlook_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/outlook_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Gmail component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioOutlookAPIComponent"
    },
    "composio.ComposioRedditAPIComponent": {
      "category": "integration",
      "file_path": "reddit_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/reddit_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Reddit component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioRedditAPIComponent"
    },
    "composio.ComposioSlackAPIComponent": {
      "category": "integration",
      "file_path": "slack_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/slack_composio.py",
      "info": {
        "dependencies": [
          "Any",
          "ComposioBaseComponent",
          "BoolInput,",
          "logger",
          "Action"
        ],
        "description": "Execute action and return response as Message.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioSlackAPIComponent"
    },
    "composio.ComposioSlackbotAPIComponent": {
      "category": "integration",
      "file_path": "slackbot_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/slackbot_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Slackbot component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioSlackbotAPIComponent"
    },
    "composio.ComposioSupabaseAPIComponent": {
      "category": "integration",
      "file_path": "supabase_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/supabase_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Supabase component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioSupabaseAPIComponent"
    },
    "composio.ComposioTodoistAPIComponent": {
      "category": "integration",
      "file_path": "todoist_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/todoist_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Todoist component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioTodoistAPIComponent"
    },
    "composio.ComposioWrikeAPIComponent": {
      "category": "integration",
      "file_path": "wrike_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/wrike_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Wrike component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioWrikeAPIComponent"
    },
    "composio.ComposioYoutubeAPIComponent": {
      "category": "integration",
      "file_path": "youtube_composio",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/composio/youtube_composio.py",
      "info": {
        "dependencies": [
          "ComposioBaseComponent"
        ],
        "description": "Set the default tools for Youtube component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "composio",
      "name": "ComposioYoutubeAPIComponent"
    },
    "couchbase.CouchbaseVectorStoreComponent": {
      "category": "other",
      "file_path": "couchbase",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/couchbase/couchbase.py",
      "info": {
        "dependencies": [
          "timedelta",
          "CouchbaseVectorStore",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "HandleInput,",
          "Data",
          "PasswordAuthenticator",
          "Cluster",
          "ClusterOptions"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "couchbase",
      "name": "CouchbaseVectorStoreComponent"
    },
    "crewai.CrewAIAgentComponent": {
      "category": "tools",
      "file_path": "crewai",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/crewai.py",
      "info": {
        "dependencies": [
          "convert_llm,",
          "Component",
          "BoolInput,",
          "Agent"
        ],
        "description": "This component allows you to create a CrewAI agent with the specified role, goal, backstory, tools,\n    and language model.\n\n    Args:\n        Component (Component): Base class for all components.\n\n    Returns:\n        Agent: CrewAI agent.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "CrewAIAgentComponent"
    },
    "crewai.HierarchicalCrewComponent": {
      "category": "tools",
      "file_path": "hierarchical_crew",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/hierarchical_crew.py",
      "info": {
        "dependencies": [
          "BaseCrewComponent",
          "HandleInput",
          "Crew,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "HierarchicalCrewComponent"
    },
    "crewai.HierarchicalTaskComponent": {
      "category": "tools",
      "file_path": "hierarchical_task",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/hierarchical_task.py",
      "info": {
        "dependencies": [
          "HierarchicalTask",
          "Component",
          "HandleInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "HierarchicalTaskComponent"
    },
    "crewai.SequentialCrewComponent": {
      "category": "tools",
      "file_path": "sequential_crew",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/sequential_crew.py",
      "info": {
        "dependencies": [
          "BaseCrewComponent",
          "HandleInput",
          "Message",
          "Crew,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "SequentialCrewComponent"
    },
    "crewai.SequentialTaskAgentComponent": {
      "category": "tools",
      "file_path": "sequential_task_agent",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/sequential_task_agent.py",
      "info": {
        "dependencies": [
          "SequentialTask",
          "Component",
          "BoolInput,",
          "Agent,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "SequentialTaskAgentComponent"
    },
    "crewai.SequentialTaskComponent": {
      "category": "tools",
      "file_path": "sequential_task",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/crewai/sequential_task.py",
      "info": {
        "dependencies": [
          "SequentialTask",
          "Component",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "crewai",
      "name": "SequentialTaskComponent"
    },
    "custom_component.CustomComponent": {
      "category": "custom",
      "file_path": "custom_component",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/custom_component/custom_component.py",
      "info": {
        "dependencies": [
          "Component",
          "MessageTextInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "custom_component",
      "name": "CustomComponent"
    },
    "data.APIRequestComponent": {
      "category": "other",
      "file_path": "api_request",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/api_request.py",
      "info": {
        "dependencies": [
          "re",
          "tempfile",
          "datetime,",
          "Path",
          "Any",
          "parse_qsl,",
          "aiofiles",
          "httpx",
          "validators",
          "parse_context",
          "Component",
          "TabInput",
          "(",
          "Data",
          "dotdict",
          "set_current_fields,"
        ],
        "description": "Parse a value that might be a JSON string.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "APIRequestComponent"
    },
    "data.CSVToDataComponent": {
      "category": "other",
      "file_path": "csv_to_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/csv_to_data.py",
      "info": {
        "dependencies": [
          "csv",
          "io",
          "Path",
          "Component",
          "FileInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "CSVToDataComponent"
    },
    "data.DirectoryComponent": {
      "category": "other",
      "file_path": "directory",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/directory.py",
      "info": {
        "dependencies": [
          "TEXT_FILE_TYPES,",
          "Component",
          "BoolInput,",
          "Data",
          "DataFrame",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "DirectoryComponent"
    },
    "data.FileComponent": {
      "category": "other",
      "file_path": "file",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/file.py",
      "info": {
        "dependencies": [
          "annotations",
          "subprocess",
          "textwrap",
          "deepcopy",
          "Any",
          "BaseFileComponent",
          "TEXT_FILE_TYPES,",
          "DropdownInput,",
          "BoolInput,",
          "Data",
          "DataFrame",
          "Message",
          "json,",
          "ConversionStatus,",
          "DocumentConverter",
          "ImageRefMode",
          "PdfPipelineOptions",
          "PdfFormatOption",
          "get_ocr_factory",
          "VlmPipelineOptions",
          "GRANITEDOCLING_MLX,",
          "VlmPipeline",
          "mlx_vlm"
        ],
        "description": "File component with optional Docling processing (isolated in a subprocess).",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "FileComponent"
    },
    "data.JSONToDataComponent": {
      "category": "other",
      "file_path": "json_to_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/json_to_data.py",
      "info": {
        "dependencies": [
          "Path",
          "repair_json",
          "Component",
          "FileInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "JSONToDataComponent"
    },
    "data.NewsSearchComponent": {
      "category": "other",
      "file_path": "news_search",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/news_search.py",
      "info": {
        "dependencies": [
          "quote_plus",
          "pandas",
          "requests",
          "BeautifulSoup",
          "Component",
          "IntInput,",
          "DataFrame"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "NewsSearchComponent"
    },
    "data.RSSReaderComponent": {
      "category": "other",
      "file_path": "rss",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/rss.py",
      "info": {
        "dependencies": [
          "pandas",
          "requests",
          "BeautifulSoup",
          "Component",
          "IntInput,",
          "logger",
          "DataFrame"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "RSSReaderComponent"
    },
    "data.SQLComponent": {
      "category": "other",
      "file_path": "sql_executor",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/sql_executor.py",
      "info": {
        "dependencies": [
          "TYPE_CHECKING,",
          "SQLDatabase",
          "SQLAlchemyError",
          "ComponentWithCache",
          "BoolInput,",
          "DataFrame",
          "Message",
          "CacheMiss",
          "Result"
        ],
        "description": "A sql component.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "SQLComponent"
    },
    "data.URLComponent": {
      "category": "other",
      "file_path": "url",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/url.py",
      "info": {
        "dependencies": [
          "re",
          "requests",
          "BeautifulSoup",
          "RecursiveUrlLoader",
          "Component",
          "RangeSpec",
          "safe_convert",
          "BoolInput,",
          "logger",
          "DataFrame",
          "Message",
          "get_user_agent"
        ],
        "description": "This component allows fetching content from one or more URLs, with options to:\n    - Control crawl depth\n    - Prevent crawling outside the root domain\n    - Use async loading for better performance\n    - Extract either raw HTML or clean text\n    - Configure request headers and timeouts",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "URLComponent"
    },
    "data.WebSearchComponent": {
      "category": "other",
      "file_path": "web_search",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/web_search.py",
      "info": {
        "dependencies": [
          "re",
          "Any",
          "parse_qs,",
          "pandas",
          "requests",
          "BeautifulSoup",
          "Component",
          "IntInput,",
          "DataFrame",
          "get_user_agent"
        ],
        "description": "Update input visibility based on search mode.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "WebSearchComponent"
    },
    "data.WebhookComponent": {
      "category": "other",
      "file_path": "webhook",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/data/webhook.py",
      "info": {
        "dependencies": [
          "Component",
          "MultilineInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "data",
      "name": "WebhookComponent"
    },
    "datastax.AssistantsCreateAssistant": {
      "category": "other",
      "file_path": "create_assistant",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/create_assistant.py",
      "info": {
        "dependencies": [
          "get_patched_openai_client",
          "ComponentWithCache",
          "MultilineInput,",
          "logger",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AssistantsCreateAssistant"
    },
    "datastax.AssistantsCreateThread": {
      "category": "other",
      "file_path": "create_thread",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/create_thread.py",
      "info": {
        "dependencies": [
          "get_patched_openai_client",
          "ComponentWithCache",
          "MultilineInput",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AssistantsCreateThread"
    },
    "datastax.AssistantsGetAssistantName": {
      "category": "other",
      "file_path": "get_assistant",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/get_assistant.py",
      "info": {
        "dependencies": [
          "get_patched_openai_client",
          "ComponentWithCache",
          "MultilineInput,",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AssistantsGetAssistantName"
    },
    "datastax.AssistantsListAssistants": {
      "category": "other",
      "file_path": "list_assistants",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/list_assistants.py",
      "info": {
        "dependencies": [
          "get_patched_openai_client",
          "ComponentWithCache",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AssistantsListAssistants"
    },
    "datastax.AssistantsRun": {
      "category": "other",
      "file_path": "run",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/run.py",
      "info": {
        "dependencies": [
          "Any",
          "AssistantEventHandler",
          "get_patched_openai_client",
          "ComponentWithCache",
          "MultilineInput",
          "dotdict",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AssistantsRun"
    },
    "datastax.AstraAssistantManager": {
      "category": "other",
      "file_path": "astra_assistant_manager",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astra_assistant_manager.py",
      "info": {
        "dependencies": [
          "asyncio",
          "to_thread",
          "TYPE_CHECKING,",
          "AssistantManager",
          "AgentFinish",
          "ExceptionWithMessageError,",
          "(",
          "ComponentWithCache",
          "DropdownInput,",
          "logger",
          "delete_message",
          "ContentBlock",
          "Message",
          "Output",
          "MESSAGE_SENDER_AI",
          "SendMessageFunctionType"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraAssistantManager"
    },
    "datastax.AstraDBCQLToolComponent": {
      "category": "other",
      "file_path": "astradb_cql",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astradb_cql.py",
      "info": {
        "dependencies": [
          "urllib",
          "datetime,",
          "HTTPStatus",
          "Any",
          "requests",
          "StructuredTool,",
          "BaseModel,",
          "LCToolComponent",
          "DictInput,",
          "logger",
          "Data",
          "EditMode"
        ],
        "description": "Args:\n            timestamp_str (str): Input timestamp string\n\n        Returns:\n            str: Formatted timestamp string in YYYY-MM-DDTHH:MI:SS.000Z format\n\n        Raises:\n            ValueError: If the timestamp cannot be parsed",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraDBCQLToolComponent"
    },
    "datastax.AstraDBChatMemory": {
      "category": "other",
      "file_path": "astra_db",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astra_db.py",
      "info": {
        "dependencies": [
          "LCChatMemoryComponent",
          "Memory",
          "MessageTextInput,",
          "parse_api_endpoint",
          "AstraDBChatMessageHistory"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraDBChatMemory"
    },
    "datastax.AstraDBToolComponent": {
      "category": "other",
      "file_path": "astradb_tool",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astradb_tool.py",
      "info": {
        "dependencies": [
          "datetime,",
          "Any",
          "Collection,",
          "StructuredTool,",
          "BaseModel,",
          "LCToolComponent",
          "BoolInput,",
          "logger",
          "Data",
          "EditMode",
          "parse_api_endpoint"
        ],
        "description": "It is keep only for backward compatibility.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraDBToolComponent"
    },
    "datastax.AstraDBVectorStoreComponent": {
      "category": "other",
      "file_path": "astradb_vectorstore",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astradb_vectorstore.py",
      "info": {
        "dependencies": [
          "re",
          "defaultdict",
          "asdict,",
          "DataAPIClient,",
          "RerankServiceOptions",
          "CollectionDescriptor,",
          "AstraDBVectorStore,",
          "HybridSearchMode,",
          "Document",
          "LCVectorStoreComponent,",
          "vector_store_connection",
          "docs_to_data",
          "FloatInput,",
          "(",
          "Data",
          "serialize",
          "get_version_info",
          "AstraDBVectorStore"
        ],
        "description": "Reset provider options and related configurations in the build_config dictionary.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraDBVectorStoreComponent"
    },
    "datastax.AstraVectorizeComponent": {
      "category": "other",
      "file_path": "astra_vectorize",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/astra_vectorize.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "DictInput,",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "AstraVectorizeComponent"
    },
    "datastax.Dotenv": {
      "category": "other",
      "file_path": "dotenv",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/dotenv.py",
      "info": {
        "dependencies": [
          "io",
          "load_dotenv",
          "Component",
          "MultilineSecretInput",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "Dotenv"
    },
    "datastax.GetEnvVar": {
      "category": "other",
      "file_path": "getenvvar",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/datastax/getenvvar.py",
      "info": {
        "dependencies": [
          "Component",
          "StrInput",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "datastax",
      "name": "GetEnvVar"
    },
    "deepseek.DeepSeekModelComponent": {
      "category": "models",
      "file_path": "deepseek",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/deepseek/deepseek.py",
      "info": {
        "dependencies": [
          "requests",
          "SecretStr",
          "override",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "ChatOpenAI",
          "BadRequestError"
        ],
        "description": "Get message from DeepSeek API exception.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "deepseek",
      "name": "DeepSeekModelComponent"
    },
    "docling.ChunkDoclingDocumentComponent": {
      "category": "document_processing",
      "file_path": "chunk_docling_document",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/docling/chunk_docling_document.py",
      "info": {
        "dependencies": [
          "tiktoken",
          "BaseChunker,",
          "HierarchicalChunker",
          "extract_docling_documents",
          "Component",
          "DropdownInput,",
          "Data,",
          "HybridChunker",
          "HuggingFaceTokenizer",
          "OpenAITokenizer"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "docling",
      "name": "ChunkDoclingDocumentComponent"
    },
    "docling.DoclingInlineComponent": {
      "category": "document_processing",
      "file_path": "docling_inline",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/docling/docling_inline.py",
      "info": {
        "dependencies": [
          "time",
          "Queue,",
          "Empty",
          "BaseFileComponent",
          "_serialize_pydantic_model,",
          "BoolInput,",
          "Data",
          "DocumentConverter"
        ],
        "description": "Handles cases where process crashes without sending result.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "docling",
      "name": "DoclingInlineComponent"
    },
    "docling.DoclingRemoteComponent": {
      "category": "document_processing",
      "file_path": "docling_remote",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/docling/docling_remote.py",
      "info": {
        "dependencies": [
          "base64",
          "time",
          "Future,",
          "Path",
          "Any",
          "httpx",
          "DoclingDocument",
          "ValidationError",
          "BaseFileComponent",
          "IntInput,",
          "FloatInput",
          "Data",
          "transform_localhost_url"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "docling",
      "name": "DoclingRemoteComponent"
    },
    "docling.ExportDoclingDocumentComponent": {
      "category": "document_processing",
      "file_path": "export_docling_document",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/docling/export_docling_document.py",
      "info": {
        "dependencies": [
          "Any",
          "ImageRefMode",
          "extract_docling_documents",
          "Component",
          "DropdownInput,",
          "Data,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "docling",
      "name": "ExportDoclingDocumentComponent"
    },
    "elastic.ElasticsearchVectorStoreComponent": {
      "category": "other",
      "file_path": "elasticsearch",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/elastic/elasticsearch.py",
      "info": {
        "dependencies": [
          "Any",
          "Elasticsearch",
          "Document",
          "ElasticsearchStore",
          "LCVectorStoreComponent,",
          "(",
          "Data"
        ],
        "description": "Elasticsearch Vector Store with with advanced, customizable search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "elastic",
      "name": "ElasticsearchVectorStoreComponent"
    },
    "elastic.OpenSearchVectorStoreComponent": {
      "category": "other",
      "file_path": "opensearch",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/elastic/opensearch.py",
      "info": {
        "dependencies": [
          "annotations",
          "uuid",
          "Any",
          "OpenSearch,",
          "LCVectorStoreComponent,",
          "vector_store_connection",
          "BoolInput,",
          "logger",
          "Data"
        ],
        "description": "This component provides vector storage and retrieval using OpenSearch, combining semantic\n    similarity search (KNN) with keyword-based search for optimal results. It supports document\n    ingestion, vector embeddings, and advanced filtering with authentication options.\n\n    Features:\n    - Vector storage with configurable engines (jvector, nmslib, faiss, lucene)\n    - Hybrid search combining KNN vector similarity and keyword matching\n    - Flexible authentication (Basic auth, JWT tokens)\n    - Advanced filtering and aggregations\n    - Metadata injection during document ingestion",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "elastic",
      "name": "OpenSearchVectorStoreComponent"
    },
    "embeddings.EmbeddingSimilarityComponent": {
      "category": "embeddings",
      "file_path": "similarity",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/embeddings/similarity.py",
      "info": {
        "dependencies": [
          "Any",
          "numpy",
          "Component",
          "DataInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "embeddings",
      "name": "EmbeddingSimilarityComponent"
    },
    "embeddings.TextEmbedderComponent": {
      "category": "embeddings",
      "file_path": "text_embedder",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/embeddings/text_embedder.py",
      "info": {
        "dependencies": [
          "TYPE_CHECKING",
          "Component",
          "HandleInput,",
          "logger",
          "Data",
          "Embeddings",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "embeddings",
      "name": "TextEmbedderComponent"
    },
    "firecrawl.FirecrawlCrawlApi": {
      "category": "other",
      "file_path": "firecrawl_crawl_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/firecrawl/firecrawl_crawl_api.py",
      "info": {
        "dependencies": [
          "uuid",
          "Component",
          "DataInput,",
          "Data",
          "FirecrawlApp"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "firecrawl",
      "name": "FirecrawlCrawlApi"
    },
    "firecrawl.FirecrawlExtractApi": {
      "category": "other",
      "file_path": "firecrawl_extract_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/firecrawl/firecrawl_extract_api.py",
      "info": {
        "dependencies": [
          "Component",
          "BoolInput,",
          "logger",
          "Data",
          "FirecrawlApp"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "firecrawl",
      "name": "FirecrawlExtractApi"
    },
    "firecrawl.FirecrawlMapApi": {
      "category": "other",
      "file_path": "firecrawl_map_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/firecrawl/firecrawl_map_api.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "Data",
          "FirecrawlApp"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "firecrawl",
      "name": "FirecrawlMapApi"
    },
    "firecrawl.FirecrawlScrapeApi": {
      "category": "other",
      "file_path": "firecrawl_scrape_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/firecrawl/firecrawl_scrape_api.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "Data",
          "FirecrawlApp"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "firecrawl",
      "name": "FirecrawlScrapeApi"
    },
    "groq.GroqModel": {
      "category": "models",
      "file_path": "groq",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/groq/groq.py",
      "info": {
        "dependencies": [
          "requests",
          "SecretStr",
          "GROQ_MODELS,",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "ChatGroq"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "groq",
      "name": "GroqModel"
    },
    "helpers.CalculatorComponent": {
      "category": "tools",
      "file_path": "calculator_core",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/calculator_core.py",
      "info": {
        "dependencies": [
          "ast",
          "operator",
          "Callable",
          "Component",
          "MessageTextInput",
          "Output",
          "Data"
        ],
        "description": "Evaluate an AST node recursively.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "CalculatorComponent"
    },
    "helpers.CreateListComponent": {
      "category": "tools",
      "file_path": "create_list",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/create_list.py",
      "info": {
        "dependencies": [
          "Component",
          "StrInput",
          "Data",
          "DataFrame",
          "Output"
        ],
        "description": "Returns:\n            DataFrame: A DataFrame containing the list data.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "CreateListComponent"
    },
    "helpers.CurrentDateComponent": {
      "category": "tools",
      "file_path": "current_date",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/current_date.py",
      "info": {
        "dependencies": [
          "datetime",
          "ZoneInfo,",
          "Component",
          "DropdownInput,",
          "logger",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "CurrentDateComponent"
    },
    "helpers.IDGeneratorComponent": {
      "category": "tools",
      "file_path": "id_generator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/id_generator.py",
      "info": {
        "dependencies": [
          "uuid",
          "Any",
          "override",
          "Component",
          "MessageTextInput,",
          "dotdict",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "IDGeneratorComponent"
    },
    "helpers.MemoryComponent": {
      "category": "tools",
      "file_path": "memory",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/memory.py",
      "info": {
        "dependencies": [
          "Any,",
          "Component",
          "data_to_text",
          "DropdownInput,",
          "aget_messages,",
          "Data",
          "DataFrame",
          "dotdict",
          "Message",
          "Output",
          "set_current_fields,",
          "MESSAGE_SENDER_AI,"
        ],
        "description": "Dynamically show only the relevant output based on the selected output type.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "MemoryComponent"
    },
    "helpers.MessageStoreComponent": {
      "category": "tools",
      "file_path": "store_message",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/store_message.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "aget_messages,",
          "Message",
          "Output",
          "MESSAGE_SENDER_AI,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "MessageStoreComponent"
    },
    "helpers.OutputParserComponent": {
      "category": "tools",
      "file_path": "output_parser",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/helpers/output_parser.py",
      "info": {
        "dependencies": [
          "CommaSeparatedListOutputParser",
          "Component",
          "OutputParser",
          "DropdownInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "helpers",
      "name": "OutputParserComponent"
    },
    "huggingface.HuggingFaceEndpointsComponent": {
      "category": "models",
      "file_path": "huggingface",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/huggingface/huggingface.py",
      "info": {
        "dependencies": [
          "Any",
          "HuggingFaceEndpoint",
          "retry,",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "DictInput,"
        ],
        "description": "Update build configuration based on field updates.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "huggingface",
      "name": "HuggingFaceEndpointsComponent"
    },
    "huggingface.HuggingFaceInferenceAPIEmbeddingsComponent": {
      "category": "models",
      "file_path": "huggingface_inference_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/huggingface/huggingface_inference_api.py",
      "info": {
        "dependencies": [
          "urlparse",
          "requests",
          "HuggingFaceInferenceAPIEmbeddings",
          "SecretStr",
          "retry,",
          "LCEmbeddingsModel",
          "Embeddings",
          "MessageTextInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "huggingface",
      "name": "HuggingFaceInferenceAPIEmbeddingsComponent"
    },
    "ibm.WatsonxAIComponent": {
      "category": "other",
      "file_path": "watsonx",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/ibm/watsonx.py",
      "info": {
        "dependencies": [
          "Any",
          "requests",
          "ChatWatsonx",
          "SecretStr",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "dotdict"
        ],
        "description": "Fetch available models from the watsonx.ai API.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "ibm",
      "name": "WatsonxAIComponent"
    },
    "ibm.WatsonxEmbeddingsComponent": {
      "category": "other",
      "file_path": "watsonx_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/ibm/watsonx_embeddings.py",
      "info": {
        "dependencies": [
          "Any",
          "requests",
          "APIClient,",
          "EmbedTextParamsMetaNames",
          "WatsonxEmbeddings",
          "SecretStr",
          "LCEmbeddingsModel",
          "Embeddings",
          "BoolInput,",
          "logger",
          "dotdict"
        ],
        "description": "Fetch available models from the watsonx.ai API.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "ibm",
      "name": "WatsonxEmbeddingsComponent"
    },
    "input_output.ChatInput": {
      "category": "other",
      "file_path": "chat",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/input_output/chat.py",
      "info": {
        "dependencies": [
          "IMG_FILE_TYPES,",
          "ChatComponent",
          "BoolInput",
          "(",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "input_output",
      "name": "ChatInput"
    },
    "input_output.ChatOutput": {
      "category": "other",
      "file_path": "chat_output",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/input_output/chat_output.py",
      "info": {
        "dependencies": [
          "Generator",
          "Any",
          "orjson",
          "jsonable_encoder",
          "ChatComponent",
          "safe_convert",
          "BoolInput,",
          "Data",
          "DataFrame",
          "Message",
          "Source",
          "Output",
          "("
        ],
        "description": "Serialize Data object to JSON string.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "input_output",
      "name": "ChatOutput"
    },
    "input_output.TextInputComponent": {
      "category": "other",
      "file_path": "text",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/input_output/text.py",
      "info": {
        "dependencies": [
          "TextComponent",
          "MultilineInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "input_output",
      "name": "TextInputComponent"
    },
    "input_output.TextOutputComponent": {
      "category": "other",
      "file_path": "text_output",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/input_output/text_output.py",
      "info": {
        "dependencies": [
          "TextComponent",
          "MultilineInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "input_output",
      "name": "TextOutputComponent"
    },
    "knowledge_bases.KnowledgeIngestionComponent": {
      "category": "other",
      "file_path": "ingestion",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/knowledge_bases/ingestion.py",
      "info": {
        "dependencies": [
          "annotations",
          "asyncio",
          "contextlib",
          "hashlib",
          "re",
          "uuid",
          "asdict,",
          "datetime,",
          "Path",
          "TYPE_CHECKING,",
          "pandas",
          "decrypt_api_key,",
          "get_user_by_id",
          "InvalidToken",
          "Chroma",
          "get_knowledge_bases",
          "OPENAI_EMBEDDING_MODEL_NAMES",
          "convert_to_dataframe",
          "Component",
          "(",
          "Data",
          "EditMode",
          "DataFrame",
          "OpenAIEmbeddings",
          "HuggingFaceEmbeddings",
          "CohereEmbeddings"
        ],
        "description": "Create or append to Aiexec Knowledge from a DataFrame.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "knowledge_bases",
      "name": "KnowledgeIngestionComponent"
    },
    "knowledge_bases.KnowledgeRetrievalComponent": {
      "category": "other",
      "file_path": "retrieval",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/knowledge_bases/retrieval.py",
      "info": {
        "dependencies": [
          "Path",
          "Any",
          "decrypt_api_key",
          "get_user_by_id",
          "InvalidToken",
          "Chroma",
          "SecretStr",
          "get_knowledge_bases",
          "Component",
          "BoolInput,",
          "logger",
          "Data",
          "DataFrame",
          "get_settings_service,",
          "OpenAIEmbeddings",
          "HuggingFaceEmbeddings",
          "CohereEmbeddings"
        ],
        "description": "Load and process knowledge base metadata.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "knowledge_bases",
      "name": "KnowledgeRetrievalComponent"
    },
    "langchain_utilities.CSVAgentComponent": {
      "category": "other",
      "file_path": "csv_agent",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/csv_agent.py",
      "info": {
        "dependencies": [
          "create_csv_agent",
          "LCAgentComponent",
          "AgentExecutor",
          "(",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "CSVAgentComponent"
    },
    "langchain_utilities.CharacterTextSplitterComponent": {
      "category": "other",
      "file_path": "character",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/character.py",
      "info": {
        "dependencies": [
          "Any",
          "CharacterTextSplitter,",
          "LCTextSplitterComponent",
          "DataInput,",
          "unescape_string"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "CharacterTextSplitterComponent"
    },
    "langchain_utilities.ConversationChainComponent": {
      "category": "other",
      "file_path": "conversation",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/conversation.py",
      "info": {
        "dependencies": [
          "LCChainComponent",
          "HandleInput,",
          "Message",
          "ConversationChain"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "ConversationChainComponent"
    },
    "langchain_utilities.FakeEmbeddingsComponent": {
      "category": "other",
      "file_path": "fake_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/fake_embeddings.py",
      "info": {
        "dependencies": [
          "FakeEmbeddings",
          "LCEmbeddingsModel",
          "Embeddings",
          "IntInput"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "FakeEmbeddingsComponent"
    },
    "langchain_utilities.HtmlLinkExtractorComponent": {
      "category": "other",
      "file_path": "html_link_extractor",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/html_link_extractor.py",
      "info": {
        "dependencies": [
          "Any",
          "HtmlLinkExtractor,",
          "BaseDocumentTransformer",
          "LCDocumentTransformerComponent",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "HtmlLinkExtractorComponent"
    },
    "langchain_utilities.JsonAgentComponent": {
      "category": "other",
      "file_path": "json_agent",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/json_agent.py",
      "info": {
        "dependencies": [
          "Path",
          "yaml",
          "AgentExecutor",
          "create_json_agent",
          "JsonToolkit",
          "JsonSpec",
          "LCAgentComponent",
          "FileInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "JsonAgentComponent"
    },
    "langchain_utilities.LLMCheckerChainComponent": {
      "category": "other",
      "file_path": "llm_checker",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/llm_checker.py",
      "info": {
        "dependencies": [
          "LLMCheckerChain",
          "LCChainComponent",
          "HandleInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "LLMCheckerChainComponent"
    },
    "langchain_utilities.LLMMathChainComponent": {
      "category": "other",
      "file_path": "llm_math",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/llm_math.py",
      "info": {
        "dependencies": [
          "LLMMathChain",
          "LCChainComponent",
          "HandleInput,",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "LLMMathChainComponent"
    },
    "langchain_utilities.LangChainHubPromptComponent": {
      "category": "other",
      "file_path": "langchain_hub",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/langchain_hub.py",
      "info": {
        "dependencies": [
          "re",
          "HumanMessagePromptTemplate",
          "Component",
          "DefaultPromptField,",
          "Output",
          "Message",
          "langchain"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "LangChainHubPromptComponent"
    },
    "langchain_utilities.LanguageRecursiveTextSplitterComponent": {
      "category": "other",
      "file_path": "language_recursive",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/language_recursive.py",
      "info": {
        "dependencies": [
          "Any",
          "Language,",
          "LCTextSplitterComponent",
          "DataInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "LanguageRecursiveTextSplitterComponent"
    },
    "langchain_utilities.NaturalLanguageTextSplitterComponent": {
      "category": "other",
      "file_path": "natural_language",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/natural_language.py",
      "info": {
        "dependencies": [
          "Any",
          "NLTKTextSplitter,",
          "LCTextSplitterComponent",
          "DataInput,",
          "unescape_string"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "NaturalLanguageTextSplitterComponent"
    },
    "langchain_utilities.OpenAIToolsAgentComponent": {
      "category": "other",
      "file_path": "openai_tools",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/openai_tools.py",
      "info": {
        "dependencies": [
          "create_openai_tools_agent",
          "ChatPromptTemplate,",
          "LCToolsAgentComponent",
          "(",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "OpenAIToolsAgentComponent"
    },
    "langchain_utilities.OpenAPIAgentComponent": {
      "category": "other",
      "file_path": "openapi",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/openapi.py",
      "info": {
        "dependencies": [
          "Path",
          "yaml",
          "AgentExecutor",
          "create_openapi_agent",
          "OpenAPIToolkit",
          "JsonSpec",
          "TextRequestsWrapper",
          "LCAgentComponent",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "OpenAPIAgentComponent"
    },
    "langchain_utilities.RecursiveCharacterTextSplitterComponent": {
      "category": "other",
      "file_path": "recursive_character",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/recursive_character.py",
      "info": {
        "dependencies": [
          "Any",
          "RecursiveCharacterTextSplitter,",
          "LCTextSplitterComponent",
          "DataInput,",
          "unescape_string"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "RecursiveCharacterTextSplitterComponent"
    },
    "langchain_utilities.RetrievalQAComponent": {
      "category": "other",
      "file_path": "retrieval_qa",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/retrieval_qa.py",
      "info": {
        "dependencies": [
          "cast",
          "RetrievalQA",
          "LCChainComponent",
          "BoolInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "RetrievalQAComponent"
    },
    "langchain_utilities.RunnableExecComponent": {
      "category": "other",
      "file_path": "runnable_executor",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/runnable_executor.py",
      "info": {
        "dependencies": [
          "AgentExecutor",
          "Component",
          "BoolInput,",
          "Message",
          "Output"
        ],
        "description": "Args:\n            result (dict): The result dictionary containing the output value.\n            input_key (str): The key used to retrieve the input value from the result dictionary.\n            output_key (str): The key used to retrieve the output value from the result dictionary.\n\n        Returns:\n            tuple: A tuple containing the output value and the status message.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "RunnableExecComponent"
    },
    "langchain_utilities.SQLAgentComponent": {
      "category": "other",
      "file_path": "sql",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/sql.py",
      "info": {
        "dependencies": [
          "AgentExecutor",
          "SQLDatabaseToolkit",
          "create_sql_agent",
          "SQLDatabase",
          "LCAgentComponent",
          "HandleInput,",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SQLAgentComponent"
    },
    "langchain_utilities.SQLDatabaseComponent": {
      "category": "other",
      "file_path": "sql_database",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/sql_database.py",
      "info": {
        "dependencies": [
          "SQLDatabase",
          "create_engine",
          "StaticPool",
          "Component",
          "("
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SQLDatabaseComponent"
    },
    "langchain_utilities.SQLGeneratorComponent": {
      "category": "other",
      "file_path": "sql_generator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/sql_generator.py",
      "info": {
        "dependencies": [
          "TYPE_CHECKING",
          "create_sql_query_chain",
          "PromptTemplate",
          "LCChainComponent",
          "HandleInput,",
          "Message",
          "Output",
          "Runnable"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SQLGeneratorComponent"
    },
    "langchain_utilities.SelfQueryRetrieverComponent": {
      "category": "other",
      "file_path": "self_query",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/self_query.py",
      "info": {
        "dependencies": [
          "AttributeInfo",
          "SelfQueryRetriever",
          "Component",
          "HandleInput,",
          "Output",
          "Data",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SelfQueryRetrieverComponent"
    },
    "langchain_utilities.SemanticTextSplitterComponent": {
      "category": "other",
      "file_path": "language_semantic",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/language_semantic.py",
      "info": {
        "dependencies": [
          "Document",
          "SemanticChunker",
          "LCTextSplitterComponent",
          "(",
          "Data"
        ],
        "description": "Split text into semantically meaningful chunks using semantic similarity.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SemanticTextSplitterComponent"
    },
    "langchain_utilities.SpiderTool": {
      "category": "other",
      "file_path": "spider",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/spider.py",
      "info": {
        "dependencies": [
          "Spider",
          "MODES",
          "Component",
          "(",
          "Data"
        ],
        "description": "SpiderTool error.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "SpiderTool"
    },
    "langchain_utilities.ToolCallingAgentComponent": {
      "category": "other",
      "file_path": "tool_calling",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/tool_calling.py",
      "info": {
        "dependencies": [
          "create_tool_calling_agent",
          "ChatPromptTemplate",
          "LCToolsAgentComponent",
          "(",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "ToolCallingAgentComponent"
    },
    "langchain_utilities.VectorStoreInfoComponent": {
      "category": "other",
      "file_path": "vector_store_info",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/vector_store_info.py",
      "info": {
        "dependencies": [
          "VectorStoreInfo",
          "Component",
          "HandleInput,",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "VectorStoreInfoComponent"
    },
    "langchain_utilities.VectorStoreRouterAgentComponent": {
      "category": "other",
      "file_path": "vector_store_router",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/vector_store_router.py",
      "info": {
        "dependencies": [
          "AgentExecutor,",
          "VectorStoreRouterToolkit",
          "LCAgentComponent",
          "HandleInput"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "VectorStoreRouterAgentComponent"
    },
    "langchain_utilities.XMLAgentComponent": {
      "category": "other",
      "file_path": "xml_agent",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/langchain_utilities/xml_agent.py",
      "info": {
        "dependencies": [
          "create_xml_agent",
          "ChatPromptTemplate,",
          "LCToolsAgentComponent",
          "(",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "langchain_utilities",
      "name": "XMLAgentComponent"
    },
    "lmstudio.LMStudioEmbeddingsComponent": {
      "category": "other",
      "file_path": "lmstudioembeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/lmstudio/lmstudioembeddings.py",
      "info": {
        "dependencies": [
          "Any",
          "urljoin",
          "httpx",
          "LCEmbeddingsModel",
          "Embeddings",
          "DropdownInput,",
          "FloatInput,",
          "NVIDIAEmbeddings"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "lmstudio",
      "name": "LMStudioEmbeddingsComponent"
    },
    "lmstudio.LMStudioModelComponent": {
      "category": "other",
      "file_path": "lmstudiomodel",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/lmstudio/lmstudiomodel.py",
      "info": {
        "dependencies": [
          "Any",
          "urljoin",
          "httpx",
          "ChatOpenAI",
          "override",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "DictInput,",
          "BadRequestError"
        ],
        "description": "Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "lmstudio",
      "name": "LMStudioModelComponent"
    },
    "logic.ConditionalRouterComponent": {
      "category": "tools",
      "file_path": "conditional_router",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/conditional_router.py",
      "info": {
        "dependencies": [
          "re",
          "Component",
          "BoolInput,",
          "Message"
        ],
        "description": "Uses two complementary mechanisms:\n        1. stop() - ACTIVE/INACTIVE state for cycle management (gets reset each iteration)\n        2. exclude_branch_conditionally() - Persistent exclusion for conditional routing\n\n        When max_iterations is reached, breaks the cycle by allowing the default_route to execute.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "ConditionalRouterComponent"
    },
    "logic.DataConditionalRouterComponent": {
      "category": "tools",
      "file_path": "data_conditional_router",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/data_conditional_router.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "DataInput,",
          "Data",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "DataConditionalRouterComponent"
    },
    "logic.FlowToolComponent": {
      "category": "tools",
      "file_path": "flow_tool",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/flow_tool.py",
      "info": {
        "dependencies": [
          "Any",
          "override",
          "LCToolComponent",
          "FlowTool",
          "Tool",
          "Graph",
          "get_flow_inputs",
          "BoolInput,",
          "logger",
          "Data",
          "dotdict"
        ],
        "description": "Args:\n            flow_name (str): The name of the flow to retrieve.\n\n        Returns:\n            Optional[Text]: The flow record if found, None otherwise.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "FlowToolComponent"
    },
    "logic.LoopComponent": {
      "category": "tools",
      "file_path": "loop",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/loop.py",
      "info": {
        "dependencies": [
          "Component",
          "HandleInput",
          "Data",
          "DataFrame",
          "Output"
        ],
        "description": "Initialize the data list, context index, and aggregated list.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "LoopComponent"
    },
    "logic.PassMessageComponent": {
      "category": "tools",
      "file_path": "pass_message",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/pass_message.py",
      "info": {
        "dependencies": [
          "Component",
          "MessageInput",
          "Message",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "PassMessageComponent"
    },
    "logic.RunFlowComponent": {
      "category": "tools",
      "file_path": "run_flow",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/run_flow.py",
      "info": {
        "dependencies": [
          "Any",
          "RunFlowBaseComponent",
          "run_flow",
          "logger",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "RunFlowComponent"
    },
    "logic.SubFlowComponent": {
      "category": "tools",
      "file_path": "sub_flow",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/logic/sub_flow.py",
      "info": {
        "dependencies": [
          "Any",
          "build_data_from_result_data",
          "Component",
          "Graph",
          "Vertex",
          "get_flow_inputs",
          "DropdownInput,",
          "logger",
          "Data",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "logic",
      "name": "SubFlowComponent"
    },
    "maritalk.MaritalkModelComponent": {
      "category": "other",
      "file_path": "maritalk",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/maritalk/maritalk.py",
      "info": {
        "dependencies": [
          "ChatMaritalk",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "maritalk",
      "name": "MaritalkModelComponent"
    },
    "milvus.MilvusVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "milvus",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/milvus/milvus.py",
      "info": {
        "dependencies": [
          "LCVectorStoreComponent,",
          "docs_to_data",
          "(",
          "Data",
          "Milvus"
        ],
        "description": "Milvus vector store with search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "milvus",
      "name": "MilvusVectorStoreComponent"
    },
    "mistral.MistralAIEmbeddingsComponent": {
      "category": "models",
      "file_path": "mistral_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/mistral/mistral_embeddings.py",
      "info": {
        "dependencies": [
          "MistralAIEmbeddings",
          "SecretStr",
          "LCModelComponent",
          "Embeddings",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "mistral",
      "name": "MistralAIEmbeddingsComponent"
    },
    "mistral.MistralAIModelComponent": {
      "category": "models",
      "file_path": "mistral",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/mistral/mistral.py",
      "info": {
        "dependencies": [
          "ChatMistralAI",
          "SecretStr",
          "LCModelComponent",
          "LanguageModel",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "mistral",
      "name": "MistralAIModelComponent"
    },
    "models.EmbeddingModelComponent": {
      "category": "other",
      "file_path": "embedding_model",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/models/embedding_model.py",
      "info": {
        "dependencies": [
          "Any",
          "OpenAIEmbeddings",
          "LCEmbeddingsModel",
          "OPENAI_EMBEDDING_MODEL_NAMES",
          "Embeddings",
          "(",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "models",
      "name": "EmbeddingModelComponent"
    },
    "models.LanguageModelComponent": {
      "category": "other",
      "file_path": "language_model",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/models/language_model.py",
      "info": {
        "dependencies": [
          "Any",
          "ChatAnthropic",
          "ChatGoogleGenerativeAI",
          "ChatOpenAI",
          "ANTHROPIC_MODELS",
          "GOOGLE_GENERATIVE_AI_MODELS",
          "LCModelComponent",
          "OPENAI_CHAT_MODEL_NAMES,",
          "LanguageModel",
          "RangeSpec",
          "BoolInput",
          "DropdownInput,",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "models",
      "name": "LanguageModelComponent"
    },
    "mongodb.MongoVectorStoreComponent": {
      "category": "other",
      "file_path": "mongodb_atlas",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/mongodb/mongodb_atlas.py",
      "info": {
        "dependencies": [
          "tempfile",
          "time",
          "certifi",
          "MongoDBAtlasVectorSearch",
          "Collection",
          "SearchIndexModel",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "Data",
          "MongoClient",
          "ObjectId"
        ],
        "description": "Args:\n            collection (Collection): The collection to verify the search index on.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "mongodb",
      "name": "MongoVectorStoreComponent"
    },
    "notdiamond.NotDiamondComponent": {
      "category": "other",
      "file_path": "notdiamond",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/notdiamond/notdiamond.py",
      "info": {
        "dependencies": [
          "warnings",
          "requests",
          "AIMessage,",
          "SecretStr",
          "get_chat_result",
          "get_model_name",
          "Component",
          "(",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "notdiamond",
      "name": "NotDiamondComponent"
    },
    "novita.NovitaModelComponent": {
      "category": "models",
      "file_path": "novita",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/novita/novita.py",
      "info": {
        "dependencies": [
          "requests",
          "ChatOpenAI",
          "SecretStr",
          "override",
          "LCModelComponent",
          "MODEL_NAMES",
          "LanguageModel",
          "RangeSpec",
          "("
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "novita",
      "name": "NovitaModelComponent"
    },
    "nvidia.NVIDIAEmbeddingsComponent": {
      "category": "models",
      "file_path": "nvidia_embedding",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/nvidia/nvidia_embedding.py",
      "info": {
        "dependencies": [
          "Any",
          "LCEmbeddingsModel",
          "Embeddings",
          "DropdownInput,",
          "FloatInput,",
          "dotdict",
          "NVIDIAEmbeddings"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "nvidia",
      "name": "NVIDIAEmbeddingsComponent"
    },
    "nvidia.NVIDIAModelComponent": {
      "category": "models",
      "file_path": "nvidia",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/nvidia/nvidia.py",
      "info": {
        "dependencies": [
          "Any",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "dotdict",
          "warnings",
          "ChatNVIDIA"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "nvidia",
      "name": "NVIDIAModelComponent"
    },
    "nvidia.NvidiaIngestComponent": {
      "category": "models",
      "file_path": "nvidia_ingest",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/nvidia/nvidia_ingest.py",
      "info": {
        "dependencies": [
          "urlparse",
          "PdfReader",
          "BaseFileComponent",
          "BoolInput,",
          "Data",
          "EXTENSION_TO_DOCUMENT_TYPE",
          "Ingestor"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "nvidia",
      "name": "NvidiaIngestComponent"
    },
    "nvidia.NvidiaRerankComponent": {
      "category": "models",
      "file_path": "nvidia_rerank",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/nvidia/nvidia_rerank.py",
      "info": {
        "dependencies": [
          "Any",
          "LCCompressorComponent",
          "BaseDocumentCompressor",
          "SecretStrInput",
          "DropdownInput,",
          "dotdict",
          "Output",
          "NVIDIARerank"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "nvidia",
      "name": "NvidiaRerankComponent"
    },
    "ollama.ChatOllamaComponent": {
      "category": "models",
      "file_path": "ollama",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/ollama/ollama.py",
      "info": {
        "dependencies": [
          "asyncio",
          "Any",
          "urljoin",
          "httpx",
          "ChatOllama",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "transform_localhost_url"
        ],
        "description": "Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "ollama",
      "name": "ChatOllamaComponent"
    },
    "ollama.OllamaEmbeddingsComponent": {
      "category": "models",
      "file_path": "ollama_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/ollama/ollama_embeddings.py",
      "info": {
        "dependencies": [
          "Any",
          "urljoin",
          "httpx",
          "OllamaEmbeddings",
          "LCModelComponent",
          "OLLAMA_EMBEDDING_MODELS",
          "Embeddings",
          "DropdownInput,",
          "transform_localhost_url"
        ],
        "description": "Get the model names from Ollama.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "ollama",
      "name": "OllamaEmbeddingsComponent"
    },
    "openai.OpenAIEmbeddingsComponent": {
      "category": "models",
      "file_path": "openai",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/openai/openai.py",
      "info": {
        "dependencies": [
          "OpenAIEmbeddings",
          "LCEmbeddingsModel",
          "OPENAI_EMBEDDING_MODEL_NAMES",
          "Embeddings",
          "BoolInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "openai",
      "name": "OpenAIEmbeddingsComponent"
    },
    "openai.OpenAIModelComponent": {
      "category": "models",
      "file_path": "openai_chat_model",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/openai/openai_chat_model.py",
      "info": {
        "dependencies": [
          "Any",
          "ChatOpenAI",
          "SecretStr",
          "LCModelComponent",
          "OPENAI_CHAT_MODEL_NAMES,",
          "LanguageModel",
          "RangeSpec",
          "BoolInput,",
          "logger",
          "BadRequestError"
        ],
        "description": "Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "openai",
      "name": "OpenAIModelComponent"
    },
    "openrouter.OpenRouterComponent": {
      "category": "other",
      "file_path": "openrouter",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/openrouter/openrouter.py",
      "info": {
        "dependencies": [
          "defaultdict",
          "Any",
          "httpx",
          "ChatOpenAI",
          "SecretStr",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "(",
          "BadRequestError"
        ],
        "description": "OpenRouter API component for language models.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "openrouter",
      "name": "OpenRouterComponent"
    },
    "perplexity.PerplexityComponent": {
      "category": "models",
      "file_path": "perplexity",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/perplexity/perplexity.py",
      "info": {
        "dependencies": [
          "ChatPerplexity",
          "SecretStr",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "perplexity",
      "name": "PerplexityComponent"
    },
    "pgvector.PGVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "pgvector",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/pgvector/pgvector.py",
      "info": {
        "dependencies": [
          "PGVector",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "HandleInput,",
          "Data",
          "transform_connection_string"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "pgvector",
      "name": "PGVectorStoreComponent"
    },
    "pinecone.PineconeVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "pinecone",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/pinecone/pinecone.py",
      "info": {
        "dependencies": [
          "numpy",
          "VectorStore",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "DropdownInput,",
          "Data",
          "PineconeVectorStore",
          "DistanceStrategy"
        ],
        "description": "Build and return a Pinecone vector store instance.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "pinecone",
      "name": "PineconeVectorStoreComponent"
    },
    "processing.AlterMetadataComponent": {
      "category": "tools",
      "file_path": "alter_metadata",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/alter_metadata.py",
      "info": {
        "dependencies": [
          "Component",
          "MessageTextInput",
          "HandleInput,",
          "Data",
          "DataFrame"
        ],
        "description": "Convert a Data object or a standard dictionary to a standard dictionary.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "AlterMetadataComponent"
    },
    "processing.BatchRunComponent": {
      "category": "tools",
      "file_path": "batch_run",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/batch_run.py",
      "info": {
        "dependencies": [
          "annotations",
          "TYPE_CHECKING,",
          "toml",
          "Component",
          "BoolInput,",
          "logger",
          "DataFrame",
          "Runnable"
        ],
        "description": "Convert a dictionary (row) into a TOML-formatted string.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "BatchRunComponent"
    },
    "processing.CombineTextComponent": {
      "category": "tools",
      "file_path": "combine_text",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/combine_text.py",
      "info": {
        "dependencies": [
          "Component",
          "MessageTextInput,",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "CombineTextComponent"
    },
    "processing.CreateDataComponent": {
      "category": "tools",
      "file_path": "create_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/create_data.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "RangeSpec",
          "BoolInput,",
          "Output",
          "Data",
          "dotdict"
        ],
        "description": "Function to get the Data from the attributes.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "CreateDataComponent"
    },
    "processing.DataFilterComponent": {
      "category": "tools",
      "file_path": "filter_data_values",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/filter_data_values.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "DataInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "DataFilterComponent"
    },
    "processing.DataFrameOperationsComponent": {
      "category": "tools",
      "file_path": "dataframe_operations",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/dataframe_operations.py",
      "info": {
        "dependencies": [
          "pandas",
          "Component",
          "SortableListInput",
          "BoolInput,",
          "logger",
          "DataFrame"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "DataFrameOperationsComponent"
    },
    "processing.DataFrameToToolsetComponent": {
      "category": "tools",
      "file_path": "dataframe_to_toolset",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/dataframe_to_toolset.py",
      "info": {
        "dependencies": [
          "annotations",
          "re",
          "TYPE_CHECKING",
          "StructuredTool",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "HandleInput,",
          "Data",
          "DataFrame",
          "Message"
        ],
        "description": "Component that converts DataFrame rows into a toolset with multiple callable actions.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "DataFrameToToolsetComponent"
    },
    "processing.DataOperationsComponent": {
      "category": "tools",
      "file_path": "data_operations",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/data_operations.py",
      "info": {
        "dependencies": [
          "ast",
          "TYPE_CHECKING,",
          "jq",
          "repair_json",
          "Component",
          "DictInput,",
          "DataInput,",
          "logger",
          "Data",
          "dotdict",
          "set_current_fields,",
          "Callable"
        ],
        "description": "Extract data dictionary from Data object.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "DataOperationsComponent"
    },
    "processing.DataToDataFrameComponent": {
      "category": "tools",
      "file_path": "data_to_dataframe",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/data_to_dataframe.py",
      "info": {
        "dependencies": [
          "Component",
          "DataInput,",
          "Data",
          "DataFrame"
        ],
        "description": "For each Data object:\n          - Merge item.data (dictionary) as columns\n          - If item.text is present, add 'text' column\n\n        Returns a DataFrame with one row per Data object.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "DataToDataFrameComponent"
    },
    "processing.ExtractDataKeyComponent": {
      "category": "tools",
      "file_path": "extract_key",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/extract_key.py",
      "info": {
        "dependencies": [
          "Component",
          "DataInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "ExtractDataKeyComponent"
    },
    "processing.FilterDataComponent": {
      "category": "tools",
      "file_path": "filter_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/filter_data.py",
      "info": {
        "dependencies": [
          "Component",
          "DataInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "FilterDataComponent"
    },
    "processing.JSONCleaner": {
      "category": "tools",
      "file_path": "json_cleaner",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/json_cleaner.py",
      "info": {
        "dependencies": [
          "unicodedata",
          "Component",
          "BoolInput,",
          "Message",
          "Output",
          "repair_json"
        ],
        "description": "Clean the input JSON string based on provided options and return the cleaned JSON string.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "JSONCleaner"
    },
    "processing.LLMRouterComponent": {
      "category": "tools",
      "file_path": "llm_router",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/llm_router.py",
      "info": {
        "dependencies": [
          "asyncio",
          "http",
          "Any",
          "aiohttp",
          "get_chat_result",
          "get_model_name",
          "Component",
          "BoolInput,",
          "Data",
          "Message",
          "Output"
        ],
        "description": "Simplify model name for matching by lowercasing and removing non-alphanumerics.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "LLMRouterComponent"
    },
    "processing.LambdaFilterComponent": {
      "category": "tools",
      "file_path": "lambda_filter",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/lambda_filter.py",
      "info": {
        "dependencies": [
          "annotations",
          "re",
          "TYPE_CHECKING,",
          "Component",
          "DataInput,",
          "Data",
          "get_data_structure",
          "Callable"
        ],
        "description": "Extract the structure of a dictionary, replacing values with their types.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "LambdaFilterComponent"
    },
    "processing.MergeDataComponent": {
      "category": "tools",
      "file_path": "merge_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/merge_data.py",
      "info": {
        "dependencies": [
          "Enum",
          "cast",
          "Component",
          "DataInput,",
          "logger",
          "DataFrame"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "MergeDataComponent"
    },
    "processing.MessageToDataComponent": {
      "category": "tools",
      "file_path": "message_to_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/message_to_data.py",
      "info": {
        "dependencies": [
          "Component",
          "MessageInput,",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "MessageToDataComponent"
    },
    "processing.ParseDataComponent": {
      "category": "tools",
      "file_path": "parse_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/parse_data.py",
      "info": {
        "dependencies": [
          "Component",
          "data_to_text,",
          "DataInput,",
          "Data",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "ParseDataComponent"
    },
    "processing.ParseDataFrameComponent": {
      "category": "tools",
      "file_path": "parse_dataframe",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/parse_dataframe.py",
      "info": {
        "dependencies": [
          "Component",
          "DataFrameInput,",
          "Message"
        ],
        "description": "then joins them with `sep`. Returns a single combined string as a Message.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "ParseDataFrameComponent"
    },
    "processing.ParseJSONDataComponent": {
      "category": "tools",
      "file_path": "parse_json_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/parse_json_data.py",
      "info": {
        "dependencies": [
          "JSONDecodeError",
          "jq",
          "repair_json",
          "Component",
          "HandleInput,",
          "Output",
          "logger",
          "Data",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "ParseJSONDataComponent"
    },
    "processing.ParserComponent": {
      "category": "tools",
      "file_path": "parser",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/parser.py",
      "info": {
        "dependencies": [
          "Component",
          "safe_convert",
          "BoolInput,",
          "Data",
          "DataFrame",
          "Message",
          "Output"
        ],
        "description": "Dynamically hide/show `template` and enforce requirement based on `stringify`.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "ParserComponent"
    },
    "processing.PromptComponent": {
      "category": "tools",
      "file_path": "prompt",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/prompt.py",
      "info": {
        "dependencies": [
          "process_prompt_template",
          "Component",
          "DefaultPromptField",
          "MessageTextInput,",
          "Message",
          "update_template_values"
        ],
        "description": "This function is called after the code validation is done.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "PromptComponent"
    },
    "processing.PythonREPLComponent": {
      "category": "tools",
      "file_path": "python_repl_core",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/python_repl_core.py",
      "info": {
        "dependencies": [
          "PythonREPL",
          "Component",
          "MultilineInput,",
          "Data"
        ],
        "description": "Create a globals dictionary with only the specified allowed imports.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "PythonREPLComponent"
    },
    "processing.RegexExtractorComponent": {
      "category": "tools",
      "file_path": "regex",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/regex.py",
      "info": {
        "dependencies": [
          "re",
          "Component",
          "MessageTextInput,",
          "Data",
          "Message"
        ],
        "description": "Get matches as a formatted text message.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "RegexExtractorComponent"
    },
    "processing.SelectDataComponent": {
      "category": "tools",
      "file_path": "select_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/select_data.py",
      "info": {
        "dependencies": [
          "Component",
          "RangeSpec",
          "DataInput,",
          "Output",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "SelectDataComponent"
    },
    "processing.SplitTextComponent": {
      "category": "tools",
      "file_path": "split_text",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/split_text.py",
      "info": {
        "dependencies": [
          "CharacterTextSplitter",
          "Component",
          "DropdownInput,",
          "Data",
          "DataFrame",
          "Message",
          "unescape_string"
        ],
        "description": "Fix common separator issues and convert to proper format.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "SplitTextComponent"
    },
    "processing.StructuredOutputComponent": {
      "category": "tools",
      "file_path": "structured_output",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/structured_output.py",
      "info": {
        "dependencies": [
          "BaseModel,",
          "create_extractor",
          "get_chat_result",
          "Component",
          "build_model_from_schema",
          "(",
          "Data",
          "DataFrame",
          "EditMode"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "StructuredOutputComponent"
    },
    "processing.TypeConverterComponent": {
      "category": "tools",
      "file_path": "converter",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/converter.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "BoolInput,",
          "Data,",
          "pandas",
          "StringIO"
        ],
        "description": "Dynamically show only the relevant output based on the selected output type.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "TypeConverterComponent"
    },
    "processing.UpdateDataComponent": {
      "category": "tools",
      "file_path": "update_data",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/processing/update_data.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "RangeSpec",
          "(",
          "Output",
          "Data",
          "dotdict"
        ],
        "description": "Args:\n            build_config (dotdict): The current build configuration.\n            field_value (Any): The new value for the field.\n            field_name (Optional[str]): The name of the field being updated.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "processing",
      "name": "UpdateDataComponent"
    },
    "prototypes.PythonFunctionComponent": {
      "category": "other",
      "file_path": "python_function",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/prototypes/python_function.py",
      "info": {
        "dependencies": [
          "Callable",
          "Component",
          "get_function",
          "CodeInput,",
          "logger",
          "Data",
          "dotdict",
          "Message"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "prototypes",
      "name": "PythonFunctionComponent"
    },
    "qdrant.QdrantVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "qdrant",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/qdrant/qdrant.py",
      "info": {
        "dependencies": [
          "Embeddings",
          "Qdrant",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "(",
          "Data",
          "QdrantClient"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "qdrant",
      "name": "QdrantVectorStoreComponent"
    },
    "redis.RedisIndexChatMemory": {
      "category": "vectorstores",
      "file_path": "redis_chat",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/redis/redis_chat.py",
      "info": {
        "dependencies": [
          "parse",
          "RedisChatMessageHistory",
          "LCChatMemoryComponent",
          "Memory",
          "IntInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "redis",
      "name": "RedisIndexChatMemory"
    },
    "redis.RedisVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "redis",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/redis/redis.py",
      "info": {
        "dependencies": [
          "Path",
          "CharacterTextSplitter",
          "Redis",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "HandleInput,",
          "Data"
        ],
        "description": "A custom component for implementing a Vector Store using Redis.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "redis",
      "name": "RedisVectorStoreComponent"
    },
    "sambanova.SambaNovaComponent": {
      "category": "models",
      "file_path": "sambanova",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/sambanova/sambanova.py",
      "info": {
        "dependencies": [
          "ChatSambaNovaCloud",
          "SecretStr",
          "LCModelComponent",
          "SAMBANOVA_MODEL_NAMES",
          "LanguageModel",
          "RangeSpec",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "sambanova",
      "name": "SambaNovaComponent"
    },
    "scrapegraph.ScrapeGraphMarkdownifyApi": {
      "category": "other",
      "file_path": "scrapegraph_markdownify_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/scrapegraph/scrapegraph_markdownify_api.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "Data",
          "Client",
          "sgai_logger"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "scrapegraph",
      "name": "ScrapeGraphMarkdownifyApi"
    },
    "scrapegraph.ScrapeGraphSearchApi": {
      "category": "other",
      "file_path": "scrapegraph_search_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/scrapegraph/scrapegraph_search_api.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "Data",
          "Client",
          "sgai_logger"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "scrapegraph",
      "name": "ScrapeGraphSearchApi"
    },
    "scrapegraph.ScrapeGraphSmartScraperApi": {
      "category": "other",
      "file_path": "scrapegraph_smart_scraper_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/scrapegraph/scrapegraph_smart_scraper_api.py",
      "info": {
        "dependencies": [
          "Component",
          "(",
          "Data",
          "Client",
          "sgai_logger"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "scrapegraph",
      "name": "ScrapeGraphSmartScraperApi"
    },
    "searchapi.SearchComponent": {
      "category": "search",
      "file_path": "search",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/searchapi/search.py",
      "info": {
        "dependencies": [
          "Any",
          "SearchApiAPIWrapper",
          "Component",
          "DictInput,",
          "Output",
          "Data",
          "DataFrame"
        ],
        "description": "Returns:\n            DataFrame: A DataFrame containing the search results.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "searchapi",
      "name": "SearchComponent"
    },
    "supabase.SupabaseVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "supabase",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/supabase/supabase.py",
      "info": {
        "dependencies": [
          "SupabaseVectorStore",
          "Client,",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "HandleInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "supabase",
      "name": "SupabaseVectorStoreComponent"
    },
    "tools.CalculatorToolComponent": {
      "category": "tools",
      "file_path": "calculator",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/calculator.py",
      "info": {
        "dependencies": [
          "ast",
          "operator",
          "pytest",
          "ToolException",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "MessageTextInput",
          "logger",
          "Data",
          "StructuredTool"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "CalculatorToolComponent"
    },
    "tools.PythonCodeStructuredTool": {
      "category": "tools",
      "file_path": "python_code_structured_tool",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/python_code_structured_tool.py",
      "info": {
        "dependencies": [
          "ast",
          "Any",
          "Tool",
          "StructuredTool",
          "Field,",
          "Undefined",
          "override",
          "LCToolComponent",
          "BoolInput,",
          "Output",
          "logger",
          "Data",
          "dotdict"
        ],
        "description": "This function is called after the code validation is done.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "PythonCodeStructuredTool"
    },
    "tools.PythonREPLToolComponent": {
      "category": "tools",
      "file_path": "python_repl",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/python_repl.py",
      "info": {
        "dependencies": [
          "StructuredTool",
          "ToolException",
          "PythonREPL",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "StrInput",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "PythonREPLToolComponent"
    },
    "tools.SearXNGToolComponent": {
      "category": "tools",
      "file_path": "searxng",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/searxng.py",
      "info": {
        "dependencies": [
          "Sequence",
          "Any",
          "requests",
          "Tool",
          "StructuredTool",
          "Field,",
          "LCToolComponent",
          "DropdownInput,",
          "Output",
          "logger",
          "dotdict"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "SearXNGToolComponent"
    },
    "tools.SearchAPIComponent": {
      "category": "tools",
      "file_path": "search_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/search_api.py",
      "info": {
        "dependencies": [
          "Any",
          "StructuredTool",
          "SearchApiAPIWrapper",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "DictInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "SearchAPIComponent"
    },
    "tools.SerpAPIComponent": {
      "category": "tools",
      "file_path": "serp_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/serp_api.py",
      "info": {
        "dependencies": [
          "Any",
          "StructuredTool",
          "SerpAPIWrapper",
          "ToolException",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "DictInput,",
          "logger",
          "Data"
        ],
        "description": "Build a SerpAPIWrapper with the provided parameters.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "SerpAPIComponent"
    },
    "tools.TavilySearchToolComponent": {
      "category": "tools",
      "file_path": "tavily_search_tool",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/tavily_search_tool.py",
      "info": {
        "dependencies": [
          "Enum",
          "httpx",
          "StructuredTool",
          "ToolException",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "BoolInput,",
          "logger",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "TavilySearchToolComponent"
    },
    "tools.WikidataAPIComponent": {
      "category": "tools",
      "file_path": "wikidata_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/wikidata_api.py",
      "info": {
        "dependencies": [
          "Any",
          "httpx",
          "StructuredTool,",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "MultilineInput",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "WikidataAPIComponent"
    },
    "tools.WikipediaAPIComponent": {
      "category": "tools",
      "file_path": "wikipedia_api",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/wikipedia_api.py",
      "info": {
        "dependencies": [
          "cast",
          "WikipediaQueryRun",
          "WikipediaAPIWrapper",
          "LCToolComponent",
          "Tool",
          "BoolInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "WikipediaAPIComponent"
    },
    "tools.YfinanceToolComponent": {
      "category": "tools",
      "file_path": "yahoo_finance",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/tools/yahoo_finance.py",
      "info": {
        "dependencies": [
          "ast",
          "pprint",
          "Enum",
          "StructuredTool",
          "ToolException",
          "BaseModel,",
          "LCToolComponent",
          "Tool",
          "DropdownInput,",
          "logger",
          "Data",
          "yfinance"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "tools",
      "name": "YfinanceToolComponent"
    },
    "twelvelabs.ConvertAstraToTwelveLabs": {
      "category": "other",
      "file_path": "convert_astra_results",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/convert_astra_results.py",
      "info": {
        "dependencies": [
          "Any",
          "Component",
          "HandleInput,",
          "Data",
          "Message"
        ],
        "description": "Convert Astra DB search results to TwelveLabs Pegasus inputs.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "ConvertAstraToTwelveLabs"
    },
    "twelvelabs.PegasusIndexVideo": {
      "category": "other",
      "file_path": "pegasus_index",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/pegasus_index.py",
      "info": {
        "dependencies": [
          "time",
          "ThreadPoolExecutor",
          "Path",
          "Any",
          "retry,",
          "TwelveLabs",
          "Component",
          "DataInput,",
          "Output",
          "Data"
        ],
        "description": "Indexes videos using TwelveLabs Pegasus API and adds the video ID to metadata.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "PegasusIndexVideo"
    },
    "twelvelabs.SplitVideoComponent": {
      "category": "other",
      "file_path": "split_video",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/split_video.py",
      "info": {
        "dependencies": [
          "hashlib",
          "math",
          "subprocess",
          "datetime,",
          "Path",
          "Any",
          "Component",
          "BoolInput,",
          "Data",
          "Output"
        ],
        "description": "A component that splits a video into multiple clips of specified duration using FFmpeg.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "SplitVideoComponent"
    },
    "twelvelabs.TwelveLabsPegasus": {
      "category": "other",
      "file_path": "twelvelabs_pegasus",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/twelvelabs_pegasus.py",
      "info": {
        "dependencies": [
          "subprocess",
          "time",
          "Path",
          "Any",
          "retry,",
          "TwelveLabs",
          "Component",
          "RangeSpec",
          "DataInput,",
          "Output",
          "Message"
        ],
        "description": "Returns (index_id, index_name).",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "TwelveLabsPegasus"
    },
    "twelvelabs.TwelveLabsTextEmbeddingsComponent": {
      "category": "other",
      "file_path": "text_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/text_embeddings.py",
      "info": {
        "dependencies": [
          "TwelveLabs",
          "LCEmbeddingsModel",
          "Embeddings",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "TwelveLabsTextEmbeddingsComponent"
    },
    "twelvelabs.TwelveLabsVideoEmbeddingsComponent": {
      "category": "other",
      "file_path": "video_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/video_embeddings.py",
      "info": {
        "dependencies": [
          "time",
          "Path",
          "Any,",
          "TwelveLabs",
          "LCEmbeddingsModel",
          "Embeddings",
          "DropdownInput,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "TwelveLabsVideoEmbeddingsComponent"
    },
    "twelvelabs.VideoFileComponent": {
      "category": "other",
      "file_path": "video_file",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/twelvelabs/video_file.py",
      "info": {
        "dependencies": [
          "Path",
          "BaseFileComponent",
          "FileInput",
          "Data,"
        ],
        "description": "This component supports processing video files in common video formats.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "twelvelabs",
      "name": "VideoFileComponent"
    },
    "upstash.UpstashVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "upstash",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/upstash/upstash.py",
      "info": {
        "dependencies": [
          "UpstashVectorStore",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "(",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "upstash",
      "name": "UpstashVectorStoreComponent"
    },
    "vectara.VectaraRagComponent": {
      "category": "vectorstores",
      "file_path": "vectara_rag",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vectara/vectara_rag.py",
      "info": {
        "dependencies": [
          "Component",
          "RangeSpec",
          "DropdownInput,",
          "Message",
          "Vectara",
          "RerankConfig,"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vectara",
      "name": "VectaraRagComponent"
    },
    "vectara.VectaraVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "vectara",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vectara/vectara.py",
      "info": {
        "dependencies": [
          "TYPE_CHECKING",
          "Vectara",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "HandleInput,",
          "Data",
          "DataFrame"
        ],
        "description": "Vectara Vector Store with search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vectara",
      "name": "VectaraVectorStoreComponent"
    },
    "vectorstores.AstraDBVectorStoreComponent": {
      "category": "other",
      "file_path": "astradb",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vectorstores/astradb.py",
      "info": {
        "dependencies": [
          "re",
          "defaultdict",
          "asdict,",
          "DataAPIClient,",
          "RerankServiceOptions",
          "CollectionDescriptor,",
          "AstraDBVectorStore,",
          "HybridSearchMode,",
          "Document",
          "LCVectorStoreComponent,",
          "vector_store_connection",
          "docs_to_data",
          "FloatInput,",
          "(",
          "Data",
          "serialize",
          "get_version_info",
          "AstraDBVectorStore"
        ],
        "description": "Reset provider options and related configurations in the build_config dictionary.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vectorstores",
      "name": "AstraDBVectorStoreComponent"
    },
    "vectorstores.LocalDBComponent": {
      "category": "other",
      "file_path": "local_db",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vectorstores/local_db.py",
      "info": {
        "dependencies": [
          "deepcopy",
          "Path",
          "Chroma",
          "override",
          "LCVectorStoreComponent,",
          "chroma_collection_to_data",
          "MultilineInput",
          "BoolInput,",
          "logger",
          "Data",
          "DataFrame",
          "Output",
          "CACHE_DIR"
        ],
        "description": "Chroma Vector Store with search capabilities.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vectorstores",
      "name": "LocalDBComponent"
    },
    "vectorstores.MongoVectorStoreComponent": {
      "category": "other",
      "file_path": "mongodb_atlas",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vectorstores/mongodb_atlas.py",
      "info": {
        "dependencies": [
          "tempfile",
          "time",
          "certifi",
          "MongoDBAtlasVectorSearch",
          "Collection",
          "SearchIndexModel",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "Data",
          "MongoClient",
          "ObjectId"
        ],
        "description": "Args:\n            collection (Collection): The collection to verify the search index on.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vectorstores",
      "name": "MongoVectorStoreComponent"
    },
    "vertexai.ChatVertexAIComponent": {
      "category": "models",
      "file_path": "vertexai",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vertexai/vertexai.py",
      "info": {
        "dependencies": [
          "cast",
          "LCModelComponent",
          "LanguageModel",
          "MessageTextInput",
          "BoolInput,",
          "ChatVertexAI",
          "aiplatform",
          "service_account"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vertexai",
      "name": "ChatVertexAIComponent"
    },
    "vertexai.VertexAIEmbeddingsComponent": {
      "category": "models",
      "file_path": "vertexai_embeddings",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vertexai/vertexai_embeddings.py",
      "info": {
        "dependencies": [
          "LCModelComponent",
          "Embeddings",
          "BoolInput,",
          "VertexAIEmbeddings",
          "service_account"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vertexai",
      "name": "VertexAIEmbeddingsComponent"
    },
    "vlmrun.VLMRunTranscription": {
      "category": "other",
      "file_path": "vlmrun_transcription",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/vlmrun/vlmrun_transcription.py",
      "info": {
        "dependencies": [
          "Path",
          "urlparse",
          "Component",
          "(",
          "Data",
          "logger",
          "VLMRun"
        ],
        "description": "Validate that either media files or URL is provided.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "vlmrun",
      "name": "VLMRunTranscription"
    },
    "weaviate.WeaviateVectorStoreComponent": {
      "category": "vectorstores",
      "file_path": "weaviate",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/weaviate/weaviate.py",
      "info": {
        "dependencies": [
          "weaviate",
          "Weaviate",
          "LCVectorStoreComponent,",
          "docs_to_data",
          "BoolInput,",
          "Data"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "weaviate",
      "name": "WeaviateVectorStoreComponent"
    },
    "xai.XAIModelComponent": {
      "category": "models",
      "file_path": "xai",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/xai/xai.py",
      "info": {
        "dependencies": [
          "requests",
          "ChatOpenAI",
          "SecretStr",
          "override",
          "LCModelComponent",
          "LanguageModel",
          "RangeSpec",
          "(",
          "BadRequestError"
        ],
        "description": "Fetch available models from xAI API.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "xai",
      "name": "XAIModelComponent"
    },
    "youtube.YouTubeChannelComponent": {
      "category": "datasources",
      "file_path": "channel",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/channel.py",
      "info": {
        "dependencies": [
          "Any",
          "HTTPError",
          "pandas",
          "build",
          "HttpError",
          "Component",
          "BoolInput,",
          "DataFrame",
          "Output",
          "re"
        ],
        "description": "A component that retrieves detailed information about YouTube channels.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeChannelComponent"
    },
    "youtube.YouTubeCommentsComponent": {
      "category": "datasources",
      "file_path": "comments",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/comments.py",
      "info": {
        "dependencies": [
          "contextmanager",
          "pandas",
          "build",
          "HttpError",
          "Component",
          "BoolInput,",
          "DataFrame",
          "Output",
          "re"
        ],
        "description": "A component that retrieves comments from YouTube videos.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeCommentsComponent"
    },
    "youtube.YouTubePlaylistComponent": {
      "category": "datasources",
      "file_path": "playlist",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/playlist.py",
      "info": {
        "dependencies": [
          "Playlist",
          "Component",
          "MessageTextInput",
          "Data",
          "DataFrame",
          "Output"
        ],
        "description": "",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubePlaylistComponent"
    },
    "youtube.YouTubeSearchComponent": {
      "category": "datasources",
      "file_path": "search",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/search.py",
      "info": {
        "dependencies": [
          "contextmanager",
          "pandas",
          "build",
          "HttpError",
          "Component",
          "BoolInput,",
          "DataFrame",
          "Output"
        ],
        "description": "A component that searches YouTube videos.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeSearchComponent"
    },
    "youtube.YouTubeTranscriptsComponent": {
      "category": "datasources",
      "file_path": "youtube_transcripts",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/youtube_transcripts.py",
      "info": {
        "dependencies": [
          "pandas",
          "youtube_transcript_api",
          "YoutubeLoader",
          "TranscriptFormat",
          "Component",
          "DropdownInput,",
          "Data",
          "DataFrame",
          "Message",
          "Output"
        ],
        "description": "A component that extracts spoken content from YouTube videos as transcripts.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeTranscriptsComponent"
    },
    "youtube.YouTubeTrendingComponent": {
      "category": "datasources",
      "file_path": "trending",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/trending.py",
      "info": {
        "dependencies": [
          "contextmanager",
          "pandas",
          "build",
          "HttpError",
          "Component",
          "BoolInput,",
          "logger",
          "DataFrame",
          "Output",
          "re"
        ],
        "description": "A component that retrieves trending videos from YouTube.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeTrendingComponent"
    },
    "youtube.YouTubeVideoDetailsComponent": {
      "category": "datasources",
      "file_path": "video_details",
      "full_path": "/Users/dev/Documents/GitHub/aiexec/src/wfx/src/wfx/components/youtube/video_details.py",
      "info": {
        "dependencies": [
          "contextmanager",
          "googleapiclient",
          "pandas",
          "build",
          "HttpError",
          "Component",
          "BoolInput,",
          "DataFrame",
          "Output",
          "re"
        ],
        "description": "A component that retrieves detailed information about YouTube videos.",
        "inputs": [],
        "outputs": [],
        "tags": []
      },
      "module": "youtube",
      "name": "YouTubeVideoDetailsComponent"
    }
  },
  "metadata": {
    "generated_at": "/Users/dev/Documents/GitHub/aiexec",
    "total_components": 249,
    "total_modules": 66,
    "version": "1.0"
  },
  "modules": {
    "FAISS": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "FaissVectorStoreComponent": "faiss"
      },
      "name": "FAISS"
    },
    "agents": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "AgentComponent": "agent",
        "MCPToolsComponent": "mcp_component"
      },
      "name": "agents"
    },
    "aiml": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "AIMLEmbeddingsComponent": "aiml_embeddings",
        "AIMLModelComponent": "aiml"
      },
      "name": "aiml"
    },
    "amazon": {
      "category": "cloud",
      "component_count": 3,
      "dynamic_imports": {
        "AmazonBedrockComponent": "amazon_bedrock_model",
        "AmazonBedrockEmbeddingsComponent": "amazon_bedrock_embedding",
        "S3BucketUploaderComponent": "s3_bucket_uploader"
      },
      "name": "amazon"
    },
    "anthropic": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "AnthropicModelComponent": "anthropic"
      },
      "name": "anthropic"
    },
    "assemblyai": {
      "category": "other",
      "component_count": 5,
      "dynamic_imports": {
        "AssemblyAIGetSubtitles": "assemblyai_get_subtitles",
        "AssemblyAILeMUR": "assemblyai_lemur",
        "AssemblyAIListTranscripts": "assemblyai_list_transcripts",
        "AssemblyAITranscriptionJobCreator": "assemblyai_start_transcript",
        "AssemblyAITranscriptionJobPoller": "assemblyai_poll_transcript"
      },
      "name": "assemblyai"
    },
    "azure": {
      "category": "cloud",
      "component_count": 2,
      "dynamic_imports": {
        "AzureChatOpenAIComponent": "azure_openai",
        "AzureOpenAIEmbeddingsComponent": "azure_openai_embeddings"
      },
      "name": "azure"
    },
    "baidu": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "QianfanChatEndpoint": "baidu_qianfan_chat"
      },
      "name": "baidu"
    },
    "cassandra": {
      "category": "other",
      "component_count": 3,
      "dynamic_imports": {
        "CassandraChatMemory": "cassandra_chat",
        "CassandraGraphVectorStoreComponent": "cassandra_graph",
        "CassandraVectorStoreComponent": "cassandra"
      },
      "name": "cassandra"
    },
    "chroma": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "ChromaVectorStoreComponent": "chroma"
      },
      "name": "chroma"
    },
    "cleanlab": {
      "category": "other",
      "component_count": 3,
      "dynamic_imports": {
        "CleanlabEvaluator": "cleanlab_evaluator",
        "CleanlabRAGEvaluator": "cleanlab_rag_evaluator",
        "CleanlabRemediator": "cleanlab_remediator"
      },
      "name": "cleanlab"
    },
    "clickhouse": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "ClickhouseVectorStoreComponent": "clickhouse"
      },
      "name": "clickhouse"
    },
    "cloudflare": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "CloudflareWorkersAIEmbeddingsComponent": "cloudflare"
      },
      "name": "cloudflare"
    },
    "cohere": {
      "category": "models",
      "component_count": 3,
      "dynamic_imports": {
        "CohereComponent": "cohere_models",
        "CohereEmbeddingsComponent": "cohere_embeddings",
        "CohereRerankComponent": "cohere_rerank"
      },
      "name": "cohere"
    },
    "composio": {
      "category": "integration",
      "component_count": 28,
      "dynamic_imports": {
        "ComposioAPIComponent": "composio_api",
        "ComposioAirtableAPIComponent": "airtable_composio",
        "ComposioAsanaAPIComponent": "asana_composio",
        "ComposioAttioAPIComponent": "attio_composio",
        "ComposioCalendlyAPIComponent": "calendly_composio",
        "ComposioContentfulAPIComponent": "contentful_composio",
        "ComposioDiscordAPIComponent": "discord_composio",
        "ComposioFigmaAPIComponent": "figma_composio",
        "ComposioGitHubAPIComponent": "github_composio",
        "ComposioGmailAPIComponent": "gmail_composio",
        "ComposioGoogleCalendarAPIComponent": "googlecalendar_composio",
        "ComposioGoogleDocsAPIComponent": "googledocs_composio",
        "ComposioGoogleSheetsAPIComponent": "googlesheets_composio",
        "ComposioGoogleTasksAPIComponent": "googletasks_composio",
        "ComposioGooglemeetAPIComponent": "googlemeet_composio",
        "ComposioKlaviyoAPIComponent": "klaviyo_composio",
        "ComposioLinearAPIComponent": "linear_composio",
        "ComposioMiroAPIComponent": "miro_composio",
        "ComposioNotionAPIComponent": "notion_composio",
        "ComposioOneDriveAPIComponent": "onedrive_composio",
        "ComposioOutlookAPIComponent": "outlook_composio",
        "ComposioRedditAPIComponent": "reddit_composio",
        "ComposioSlackAPIComponent": "slack_composio",
        "ComposioSlackbotAPIComponent": "slackbot_composio",
        "ComposioSupabaseAPIComponent": "supabase_composio",
        "ComposioTodoistAPIComponent": "todoist_composio",
        "ComposioWrikeAPIComponent": "wrike_composio",
        "ComposioYoutubeAPIComponent": "youtube_composio"
      },
      "name": "composio"
    },
    "couchbase": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "CouchbaseVectorStoreComponent": "couchbase"
      },
      "name": "couchbase"
    },
    "crewai": {
      "category": "tools",
      "component_count": 6,
      "dynamic_imports": {
        "CrewAIAgentComponent": "crewai",
        "HierarchicalCrewComponent": "hierarchical_crew",
        "HierarchicalTaskComponent": "hierarchical_task",
        "SequentialCrewComponent": "sequential_crew",
        "SequentialTaskAgentComponent": "sequential_task_agent",
        "SequentialTaskComponent": "sequential_task"
      },
      "name": "crewai"
    },
    "custom_component": {
      "category": "custom",
      "component_count": 1,
      "dynamic_imports": {
        "CustomComponent": "custom_component"
      },
      "name": "custom_component"
    },
    "data": {
      "category": "other",
      "component_count": 11,
      "dynamic_imports": {
        "APIRequestComponent": "api_request",
        "CSVToDataComponent": "csv_to_data",
        "DirectoryComponent": "directory",
        "FileComponent": "file",
        "JSONToDataComponent": "json_to_data",
        "NewsSearchComponent": "news_search",
        "RSSReaderComponent": "rss",
        "SQLComponent": "sql_executor",
        "URLComponent": "url",
        "WebSearchComponent": "web_search",
        "WebhookComponent": "webhook"
      },
      "name": "data"
    },
    "datastax": {
      "category": "other",
      "component_count": 13,
      "dynamic_imports": {
        "AssistantsCreateAssistant": "create_assistant",
        "AssistantsCreateThread": "create_thread",
        "AssistantsGetAssistantName": "get_assistant",
        "AssistantsListAssistants": "list_assistants",
        "AssistantsRun": "run",
        "AstraAssistantManager": "astra_assistant_manager",
        "AstraDBCQLToolComponent": "astradb_cql",
        "AstraDBChatMemory": "astra_db",
        "AstraDBToolComponent": "astradb_tool",
        "AstraDBVectorStoreComponent": "astradb_vectorstore",
        "AstraVectorizeComponent": "astra_vectorize",
        "Dotenv": "dotenv",
        "GetEnvVar": "getenvvar"
      },
      "name": "datastax"
    },
    "deepseek": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "DeepSeekModelComponent": "deepseek"
      },
      "name": "deepseek"
    },
    "docling": {
      "category": "document_processing",
      "component_count": 4,
      "dynamic_imports": {
        "ChunkDoclingDocumentComponent": "chunk_docling_document",
        "DoclingInlineComponent": "docling_inline",
        "DoclingRemoteComponent": "docling_remote",
        "ExportDoclingDocumentComponent": "export_docling_document"
      },
      "name": "docling"
    },
    "elastic": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "ElasticsearchVectorStoreComponent": "elasticsearch",
        "OpenSearchVectorStoreComponent": "opensearch"
      },
      "name": "elastic"
    },
    "embeddings": {
      "category": "embeddings",
      "component_count": 2,
      "dynamic_imports": {
        "EmbeddingSimilarityComponent": "similarity",
        "TextEmbedderComponent": "text_embedder"
      },
      "name": "embeddings"
    },
    "firecrawl": {
      "category": "other",
      "component_count": 4,
      "dynamic_imports": {
        "FirecrawlCrawlApi": "firecrawl_crawl_api",
        "FirecrawlExtractApi": "firecrawl_extract_api",
        "FirecrawlMapApi": "firecrawl_map_api",
        "FirecrawlScrapeApi": "firecrawl_scrape_api"
      },
      "name": "firecrawl"
    },
    "groq": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "GroqModel": "groq"
      },
      "name": "groq"
    },
    "helpers": {
      "category": "tools",
      "component_count": 7,
      "dynamic_imports": {
        "CalculatorComponent": "calculator_core",
        "CreateListComponent": "create_list",
        "CurrentDateComponent": "current_date",
        "IDGeneratorComponent": "id_generator",
        "MemoryComponent": "memory",
        "MessageStoreComponent": "store_message",
        "OutputParserComponent": "output_parser"
      },
      "name": "helpers"
    },
    "huggingface": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "HuggingFaceEndpointsComponent": "huggingface",
        "HuggingFaceInferenceAPIEmbeddingsComponent": "huggingface_inference_api"
      },
      "name": "huggingface"
    },
    "ibm": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "WatsonxAIComponent": "watsonx",
        "WatsonxEmbeddingsComponent": "watsonx_embeddings"
      },
      "name": "ibm"
    },
    "input_output": {
      "category": "other",
      "component_count": 4,
      "dynamic_imports": {
        "ChatInput": "chat",
        "ChatOutput": "chat_output",
        "TextInputComponent": "text",
        "TextOutputComponent": "text_output"
      },
      "name": "input_output"
    },
    "knowledge_bases": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "KnowledgeIngestionComponent": "ingestion",
        "KnowledgeRetrievalComponent": "retrieval"
      },
      "name": "knowledge_bases"
    },
    "langchain_utilities": {
      "category": "other",
      "component_count": 26,
      "dynamic_imports": {
        "CSVAgentComponent": "csv_agent",
        "CharacterTextSplitterComponent": "character",
        "ConversationChainComponent": "conversation",
        "FakeEmbeddingsComponent": "fake_embeddings",
        "HtmlLinkExtractorComponent": "html_link_extractor",
        "JsonAgentComponent": "json_agent",
        "LLMCheckerChainComponent": "llm_checker",
        "LLMMathChainComponent": "llm_math",
        "LangChainHubPromptComponent": "langchain_hub",
        "LanguageRecursiveTextSplitterComponent": "language_recursive",
        "NaturalLanguageTextSplitterComponent": "natural_language",
        "OpenAIToolsAgentComponent": "openai_tools",
        "OpenAPIAgentComponent": "openapi",
        "RecursiveCharacterTextSplitterComponent": "recursive_character",
        "RetrievalQAComponent": "retrieval_qa",
        "RunnableExecComponent": "runnable_executor",
        "SQLAgentComponent": "sql",
        "SQLDatabaseComponent": "sql_database",
        "SQLGeneratorComponent": "sql_generator",
        "SelfQueryRetrieverComponent": "self_query",
        "SemanticTextSplitterComponent": "language_semantic",
        "SpiderTool": "spider",
        "ToolCallingAgentComponent": "tool_calling",
        "VectorStoreInfoComponent": "vector_store_info",
        "VectorStoreRouterAgentComponent": "vector_store_router",
        "XMLAgentComponent": "xml_agent"
      },
      "name": "langchain_utilities"
    },
    "lmstudio": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "LMStudioEmbeddingsComponent": "lmstudioembeddings",
        "LMStudioModelComponent": "lmstudiomodel"
      },
      "name": "lmstudio"
    },
    "logic": {
      "category": "tools",
      "component_count": 7,
      "dynamic_imports": {
        "ConditionalRouterComponent": "conditional_router",
        "DataConditionalRouterComponent": "data_conditional_router",
        "FlowToolComponent": "flow_tool",
        "LoopComponent": "loop",
        "PassMessageComponent": "pass_message",
        "RunFlowComponent": "run_flow",
        "SubFlowComponent": "sub_flow"
      },
      "name": "logic"
    },
    "maritalk": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "MaritalkModelComponent": "maritalk"
      },
      "name": "maritalk"
    },
    "milvus": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "MilvusVectorStoreComponent": "milvus"
      },
      "name": "milvus"
    },
    "mistral": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "MistralAIEmbeddingsComponent": "mistral_embeddings",
        "MistralAIModelComponent": "mistral"
      },
      "name": "mistral"
    },
    "models": {
      "category": "other",
      "component_count": 2,
      "dynamic_imports": {
        "EmbeddingModelComponent": "embedding_model",
        "LanguageModelComponent": "language_model"
      },
      "name": "models"
    },
    "mongodb": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "MongoVectorStoreComponent": "mongodb_atlas"
      },
      "name": "mongodb"
    },
    "notdiamond": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "NotDiamondComponent": "notdiamond"
      },
      "name": "notdiamond"
    },
    "novita": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "NovitaModelComponent": "novita"
      },
      "name": "novita"
    },
    "nvidia": {
      "category": "models",
      "component_count": 4,
      "dynamic_imports": {
        "NVIDIAEmbeddingsComponent": "nvidia_embedding",
        "NVIDIAModelComponent": "nvidia",
        "NvidiaIngestComponent": "nvidia_ingest",
        "NvidiaRerankComponent": "nvidia_rerank"
      },
      "name": "nvidia"
    },
    "ollama": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "ChatOllamaComponent": "ollama",
        "OllamaEmbeddingsComponent": "ollama_embeddings"
      },
      "name": "ollama"
    },
    "openai": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "OpenAIEmbeddingsComponent": "openai",
        "OpenAIModelComponent": "openai_chat_model"
      },
      "name": "openai"
    },
    "openrouter": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "OpenRouterComponent": "openrouter"
      },
      "name": "openrouter"
    },
    "perplexity": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "PerplexityComponent": "perplexity"
      },
      "name": "perplexity"
    },
    "pgvector": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "PGVectorStoreComponent": "pgvector"
      },
      "name": "pgvector"
    },
    "pinecone": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "PineconeVectorStoreComponent": "pinecone"
      },
      "name": "pinecone"
    },
    "processing": {
      "category": "tools",
      "component_count": 28,
      "dynamic_imports": {
        "AlterMetadataComponent": "alter_metadata",
        "BatchRunComponent": "batch_run",
        "CombineTextComponent": "combine_text",
        "CreateDataComponent": "create_data",
        "DataFilterComponent": "filter_data_values",
        "DataFrameOperationsComponent": "dataframe_operations",
        "DataFrameToToolsetComponent": "dataframe_to_toolset",
        "DataOperationsComponent": "data_operations",
        "DataToDataFrameComponent": "data_to_dataframe",
        "ExtractDataKeyComponent": "extract_key",
        "FilterDataComponent": "filter_data",
        "JSONCleaner": "json_cleaner",
        "LLMRouterComponent": "llm_router",
        "LambdaFilterComponent": "lambda_filter",
        "MergeDataComponent": "merge_data",
        "MessageToDataComponent": "message_to_data",
        "ParseDataComponent": "parse_data",
        "ParseDataFrameComponent": "parse_dataframe",
        "ParseJSONDataComponent": "parse_json_data",
        "ParserComponent": "parser",
        "PromptComponent": "prompt",
        "PythonREPLComponent": "python_repl_core",
        "RegexExtractorComponent": "regex",
        "SelectDataComponent": "select_data",
        "SplitTextComponent": "split_text",
        "StructuredOutputComponent": "structured_output",
        "TypeConverterComponent": "converter",
        "UpdateDataComponent": "update_data"
      },
      "name": "processing"
    },
    "prototypes": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "PythonFunctionComponent": "python_function"
      },
      "name": "prototypes"
    },
    "qdrant": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "QdrantVectorStoreComponent": "qdrant"
      },
      "name": "qdrant"
    },
    "redis": {
      "category": "vectorstores",
      "component_count": 2,
      "dynamic_imports": {
        "RedisIndexChatMemory": "redis_chat",
        "RedisVectorStoreComponent": "redis"
      },
      "name": "redis"
    },
    "sambanova": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "SambaNovaComponent": "sambanova"
      },
      "name": "sambanova"
    },
    "scrapegraph": {
      "category": "other",
      "component_count": 3,
      "dynamic_imports": {
        "ScrapeGraphMarkdownifyApi": "scrapegraph_markdownify_api",
        "ScrapeGraphSearchApi": "scrapegraph_search_api",
        "ScrapeGraphSmartScraperApi": "scrapegraph_smart_scraper_api"
      },
      "name": "scrapegraph"
    },
    "searchapi": {
      "category": "search",
      "component_count": 1,
      "dynamic_imports": {
        "SearchComponent": "search"
      },
      "name": "searchapi"
    },
    "supabase": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "SupabaseVectorStoreComponent": "supabase"
      },
      "name": "supabase"
    },
    "tools": {
      "category": "tools",
      "component_count": 10,
      "dynamic_imports": {
        "CalculatorToolComponent": "calculator",
        "PythonCodeStructuredTool": "python_code_structured_tool",
        "PythonREPLToolComponent": "python_repl",
        "SearXNGToolComponent": "searxng",
        "SearchAPIComponent": "search_api",
        "SerpAPIComponent": "serp_api",
        "TavilySearchToolComponent": "tavily_search_tool",
        "WikidataAPIComponent": "wikidata_api",
        "WikipediaAPIComponent": "wikipedia_api",
        "YfinanceToolComponent": "yahoo_finance"
      },
      "name": "tools"
    },
    "twelvelabs": {
      "category": "other",
      "component_count": 7,
      "dynamic_imports": {
        "ConvertAstraToTwelveLabs": "convert_astra_results",
        "PegasusIndexVideo": "pegasus_index",
        "SplitVideoComponent": "split_video",
        "TwelveLabsPegasus": "twelvelabs_pegasus",
        "TwelveLabsTextEmbeddingsComponent": "text_embeddings",
        "TwelveLabsVideoEmbeddingsComponent": "video_embeddings",
        "VideoFileComponent": "video_file"
      },
      "name": "twelvelabs"
    },
    "upstash": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "UpstashVectorStoreComponent": "upstash"
      },
      "name": "upstash"
    },
    "vectara": {
      "category": "vectorstores",
      "component_count": 2,
      "dynamic_imports": {
        "VectaraRagComponent": "vectara_rag",
        "VectaraVectorStoreComponent": "vectara"
      },
      "name": "vectara"
    },
    "vectorstores": {
      "category": "other",
      "component_count": 3,
      "dynamic_imports": {
        "AstraDBVectorStoreComponent": "astradb",
        "LocalDBComponent": "local_db",
        "MongoVectorStoreComponent": "mongodb_atlas"
      },
      "name": "vectorstores"
    },
    "vertexai": {
      "category": "models",
      "component_count": 2,
      "dynamic_imports": {
        "ChatVertexAIComponent": "vertexai",
        "VertexAIEmbeddingsComponent": "vertexai_embeddings"
      },
      "name": "vertexai"
    },
    "vlmrun": {
      "category": "other",
      "component_count": 1,
      "dynamic_imports": {
        "VLMRunTranscription": "vlmrun_transcription"
      },
      "name": "vlmrun"
    },
    "weaviate": {
      "category": "vectorstores",
      "component_count": 1,
      "dynamic_imports": {
        "WeaviateVectorStoreComponent": "weaviate"
      },
      "name": "weaviate"
    },
    "xai": {
      "category": "models",
      "component_count": 1,
      "dynamic_imports": {
        "XAIModelComponent": "xai"
      },
      "name": "xai"
    },
    "youtube": {
      "category": "datasources",
      "component_count": 7,
      "dynamic_imports": {
        "YouTubeChannelComponent": "channel",
        "YouTubeCommentsComponent": "comments",
        "YouTubePlaylistComponent": "playlist",
        "YouTubeSearchComponent": "search",
        "YouTubeTranscriptsComponent": "youtube_transcripts",
        "YouTubeTrendingComponent": "trending",
        "YouTubeVideoDetailsComponent": "video_details"
      },
      "name": "youtube"
    }
  }
}