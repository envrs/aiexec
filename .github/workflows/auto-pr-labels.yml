name: Auto PR Labels

on:
  pull_request:
    types: [opened, synchronize, reopened, edited, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, reopened, edited, ready_for_review]

jobs:
  label-pr:
    name: Label Pull Request
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v46

      - name: Determine labels
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            // Map globs to labels. Update as needed.
            const labelRules = [
              { glob: 'src/backend/**', label: 'backend' },
              { glob: 'src/frontend/**', label: 'frontend' },
              { glob: 'docs/**', label: 'docs' },
              { glob: 'docker/**', label: 'infra' },
              { glob: 'deploy/**', label: 'infra' },
              { glob: 'tests/**', label: 'tests' },
              { glob: 'examples/**', label: 'examples' },
              { glob: 'packages/**', label: 'packages' },
              { glob: 'package.json', label: 'deps' },
              { glob: 'pyproject.toml', label: 'deps' },
            ];

            const changedFiles = JSON.parse(process.env.CHANGED_FILES || '[]');
            const micromatch = require('micromatch');
            const labels = new Set();

            for (const f of changedFiles) {
              for (const r of labelRules) {
                if (micromatch.isMatch(f, r.glob)) labels.add(r.label);
              }
            }

            // default label when nothing matched
            if (labels.size === 0) labels.add('other');

            return Array.from(labels);
        env:
          CHANGED_FILES: ${{ steps.changes.outputs.all_changed_files }}

      - name: Ensure labels exist
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse(process.env.TO_LABELS || '[]');
            const repoOwner = process.env.GITHUB_REPOSITORY.split('/')[0];
            const repoName = process.env.GITHUB_REPOSITORY.split('/')[1];
            for (const label of labels) {
              try {
                await github.rest.issues.getLabel({ owner: repoOwner, repo: repoName, name: label });
              } catch (err) {
                if (err.status === 404) {
                  // create label with a default color
                  await github.rest.issues.createLabel({ owner: repoOwner, repo: repoName, name: label, color: '0e8a16' });
                } else {
                  throw err;
                }
              }
            }
        env:
          TO_LABELS: ${{ steps.labels.outputs.result }}

      - name: Add labels to PR
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse(process.env.TO_LABELS || '[]');
            const prNumber = context.payload.pull_request.number;
            if (!prNumber) return;
            await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, labels });
        env:
          TO_LABELS: ${{ steps.labels.outputs.result }}
